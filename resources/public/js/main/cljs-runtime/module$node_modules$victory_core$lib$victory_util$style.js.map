{
"version":3,
"file":"module$node_modules$victory_core$lib$victory_util$style.js",
"lineCount":27,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,GAA4E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGpHC,QAAOC,CAAAA,cAAP,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAH,SAAQI,CAAAA,aAAR,GAyCAA,QAAsB,CAACC,IAAD,CAAO;AAC3B,UAAMC,SAAS,CACbC,UAAW,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CADE,EAEbC,YAAa,iFAAA,CAAA,KAAA,CAAA,GAAA,CAFA,EAGbC,QAAS,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAHI,EAIbC,KAAM,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAJO,EAKbC,KAAM,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CALO,EAMbC,IAAK,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CANQ,EAObC,KAAM,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAPO,EAQbC,MAAO,CAAC,SAAD;AAAY,aAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CARM,CAAf;AAUA,WAAOT,IAAA,GAAOC,MAAA,CAAOD,IAAP,CAAP,GAAsBC,MAAOC,CAAAA,SAApC;AAX2B,GAzC7B;AACAP,SAAQe,CAAAA,iBAAR,GAA4B,IAAK,EAAjC;AAUA,QAAMA,oBAAoBA,QAAS,CAACC,GAAD,CAAM;AACvC,SADuC,IAC9BC,OAAOC,SAAUC,CAAAA,MADa,EACLC,OAAWC,KAAJ,CAAiB,CAAP,GAAAJ,IAAA,GAAWA,IAAX,GAAkB,CAAlB,GAAsB,CAAhC,CADF,EACsCK,OAAO,CAApF,EAAuFA,IAAvF,GAA8FL,IAA9F,EAAoGK,IAAA,EAApG;AACEF,UAAA,CAAKE,IAAL,GAAY,CAAZ,CAAA,GAAiBJ,SAAA,CAAUI,IAAV,CAAjB;AADF;AAGA,QAAkB,CAAlB,GAAIF,IAAKD,CAAAA,MAAT;AACE,aAAOC,IAAKG,CAAAA,MAAL,CAAY,CAACC,IAAD,EAAOC,UAAP,CAAA,IACV,CAACD,IAAD,EAAOT,iBAAA,CAAkBU,UAAlB,CAAP,CAAsCC,CAAAA,IAAtC,CAA2C,GAA3C,CADF,EAEJX,iBAAA,CAAkBC,GAAlB,CAFI,CAEoBW,CAAAA,IAFpB,EAAP;AADF;AAKA,QAAYC,IAAAA,EAAZ,KAAIZ,GAAJ,IAAiC,IAAjC,KAAyBA,GAAzB,IAAwD,QAAxD,KAAyC,MAAOA,IAAhD;AACE,aAAOA,GAAP;AADF;AAGMa,QAAAA,GAAa,EAAbA;AACN,SAAK,MAAMC,GAAX,GAAkBd,IAAlB;AACMA,SAAIe,CAAAA,cAAJ,CAAmBD,GAAnB,CAAJ,IAEED,IAAWG,CAAAA,IAAX,CAAiB,GAAEF,GAAF,IADHd,GAAAb,CAAI2B,GAAJ3B,CACG,GAAjB,CAFF;AADF;AAMA,WAAO0B,IAAWH,CAAAA,IAAX,CAAgB,GAAhB,CAAqBC,CAAAA,IAArB,EAAP;AAnBuC,GAAzC;AA6BA3B,SAAQe,CAAAA,iBAAR,GAA4BA,iBAA5B;AA9CoH,CAApH;;",
"sources":["node_modules/victory-core/lib/victory-util/style.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$victory_core$lib$victory_util$style\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getColorScale = getColorScale;\nexports.toTransformString = void 0;\n/**\n * Given an object with CSS/SVG transform definitions, return the string value\n * for use with the `transform` CSS property or SVG attribute. Note that we\n * can't always guarantee the order will match the author's intended order, so\n * authors should only use the object notation if they know that their transform\n * is commutative or that there is only one.\n * @param {Object} obj An object of transform definitions.\n * @returns {String} The generated transform string.\n */\nconst toTransformString = function (obj) {\n  for (var _len = arguments.length, more = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    more[_key - 1] = arguments[_key];\n  }\n  if (more.length > 0) {\n    return more.reduce((memo, currentObj) => {\n      return [memo, toTransformString(currentObj)].join(\" \");\n    }, toTransformString(obj)).trim();\n  }\n  if (obj === undefined || obj === null || typeof obj === \"string\") {\n    return obj;\n  }\n  const transforms = [];\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      const value = obj[key];\n      transforms.push(`${key}(${value})`);\n    }\n  }\n  return transforms.join(\" \").trim();\n};\n\n/**\n * Given the name of a color scale, getColorScale will return an array\n * of 5 hex string values in that color scale. If no 'name' parameter\n * is given, it will return the Victory default grayscale.\n * @param {String} name The name of the color scale to return (optional).\n * @returns {Array} An array of 5 hex string values composing a color scale.\n */\nexports.toTransformString = toTransformString;\nfunction getColorScale(name) {\n  const scales = {\n    grayscale: [\"#cccccc\", \"#969696\", \"#636363\", \"#252525\"],\n    qualitative: [\"#334D5C\", \"#45B29D\", \"#EFC94C\", \"#E27A3F\", \"#DF5A49\", \"#4F7DA1\", \"#55DBC1\", \"#EFDA97\", \"#E2A37F\", \"#DF948A\"],\n    heatmap: [\"#428517\", \"#77D200\", \"#D6D305\", \"#EC8E19\", \"#C92B05\"],\n    warm: [\"#940031\", \"#C43343\", \"#DC5429\", \"#FF821D\", \"#FFAF55\"],\n    cool: [\"#2746B9\", \"#0B69D4\", \"#2794DB\", \"#31BB76\", \"#60E83B\"],\n    red: [\"#FCAE91\", \"#FB6A4A\", \"#DE2D26\", \"#A50F15\", \"#750B0E\"],\n    blue: [\"#002C61\", \"#004B8F\", \"#006BC9\", \"#3795E5\", \"#65B4F4\"],\n    green: [\"#354722\", \"#466631\", \"#649146\", \"#8AB25C\", \"#A9C97E\"]\n  };\n  return name ? scales[name] : scales.grayscale;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","getColorScale","name","scales","grayscale","qualitative","heatmap","warm","cool","red","blue","green","toTransformString","obj","_len","arguments","length","more","Array","_key","reduce","memo","currentObj","join","trim","undefined","transforms","key","hasOwnProperty","push"]
}
