shadow$provide.module$node_modules$victory_group$lib$victory_group = function(global, require, module, exports) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.VictoryGroup = void 0;
  var _isEmpty2 = _interopRequireDefault(require("module$node_modules$lodash$isEmpty")), _defaults2 = _interopRequireDefault(require("module$node_modules$lodash$defaults")), _react = _interopRequireDefault(require("module$node_modules$react$index")), _victoryCore = require("module$node_modules$victory_core$lib$index"), _victorySharedEvents = require("module$node_modules$victory_shared_events$lib$index"), _helperMethods = require("module$node_modules$victory_group$lib$helper_methods");
  global = _interopRequireDefault(require("module$node_modules$react_fast_compare$index"));
  const fallbackProps = {width:450, height:300, padding:50, offset:0}, defaultProps = {containerComponent:_react.default.createElement(_victoryCore.VictoryContainer, null), groupComponent:_react.default.createElement("g", null), samples:50, standalone:!0, theme:_victoryCore.VictoryTheme.grayscale};
  require = {role:"group", expectedComponents:["groupComponent", "containerComponent", "labelComponent"], getChildren:_helperMethods.getChildren};
  const VictoryGroup = exports.VictoryGroup = Object.assign(_react.default.memo(initialProps => {
    var role = VictoryGroup?.role;
    const {getAnimationProps, setAnimationState, getProps} = _victoryCore.Hooks.useAnimationState(), propsWithDefaults = _react.default.useMemo(() => ({...defaultProps, ...initialProps}), [initialProps]), props = getProps(propsWithDefaults);
    role = _victoryCore.Helpers.modifyProps(props, fallbackProps, role);
    const {eventKey, containerComponent, standalone, groupComponent, externalEventMutations, width, height, theme, polar, horizontal, name} = role, childComponents = _react.default.Children.toArray(role.children), calculatedProps = (0,_helperMethods.useMemoizedProps)(role), {domain, scale, style, origin} = calculatedProps;
    role = _react.default.useMemo(() => (0,_helperMethods.getChildren)(props, childComponents, calculatedProps).map((child, index) => {
      index = Object.assign({animate:getAnimationProps(props, child, index)}, child.props);
      return _react.default.cloneElement(child, index);
    }), [props, childComponents, calculatedProps, getAnimationProps]);
    const containerProps = _react.default.useMemo(() => standalone ? {domain, scale, width, height, standalone, theme, style:style.parent, horizontal, polar, origin, name} : {}, [standalone, domain, scale, width, height, theme, style, horizontal, polar, origin, name]), userProps = _react.default.useMemo(() => _victoryCore.UserProps.getSafeUserProps(propsWithDefaults), [propsWithDefaults]), container = _react.default.useMemo(() => {
      if (standalone) {
        const defaultContainerProps = (0,_defaults2.default)({}, containerComponent.props, containerProps, userProps);
        return _react.default.cloneElement(containerComponent, defaultContainerProps);
      }
      return _react.default.cloneElement(groupComponent, userProps);
    }, [groupComponent, standalone, containerComponent, containerProps, userProps]), events = _react.default.useMemo(() => _victoryCore.Wrapper.getAllEvents(props), [props]), previousProps = _victoryCore.Hooks.usePreviousProps(propsWithDefaults);
    _react.default.useEffect(() => () => {
      propsWithDefaults.animate && setAnimationState(previousProps, props);
    }, [setAnimationState, previousProps, propsWithDefaults, props]);
    return (0,_isEmpty2.default)(events) ? _react.default.cloneElement(container, container.props, role) : _react.default.createElement(_victorySharedEvents.VictorySharedEvents, {container, eventKey, events, externalEventMutations}, role);
  }, global.default), require);
  VictoryGroup.displayName = "VictoryGroup";
};

//# sourceMappingURL=module$node_modules$victory_group$lib$victory_group.js.map
