shadow$provide.module$node_modules$victory_core$lib$victory_util$scale = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }
  function validScale(scale) {
    return "function" === typeof scale ? Helpers.isFunction(scale.copy) && Helpers.isFunction(scale.domain) && Helpers.isFunction(scale.range) : "string" === typeof scale ? supportedScaleStrings.includes(scale) : !1;
  }
  function getScaleTypeFromData(props, axis) {
    if (!props.data) {
      return "linear";
    }
    const accessor = Helpers.createAccessor(props[axis]);
    props = props.data.map(datum => {
      const processedData = (0,_isPlainObject2.default)(accessor(datum)) ? accessor(datum)[axis] : accessor(datum);
      return void 0 !== processedData ? processedData : datum[axis];
    });
    return Collection.containsDates(props) ? "time" : "linear";
  }
  function getScaleFromName(name) {
    return validScale(name) ? (name = `scale${name && name[0].toUpperCase() + name.slice(1)}`, d3Scale[name]()) : d3Scale.scaleLinear();
  }
  function getScaleFromProps(props, axis) {
    if (props.scale && (props.scale.x || props.scale.y ? props.scale[axis] : 1) && (props = props.scale[axis] || props.scale, validScale(props))) {
      return Helpers.isFunction(props) ? props : getScaleFromName(props);
    }
  }
  function getType(scale) {
    if ("string" === typeof scale) {
      return scale;
    }
    const scaleType = DUCK_TYPES.filter(type => void 0 !== scale[type.method])[0];
    return scaleType ? scaleType.name : void 0;
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.getBaseScale = function(props, axis) {
    var scale = getScaleFromProps(props, axis);
    if (scale) {
      return "string" === typeof scale ? getScaleFromName(scale) : scale;
    }
    {
      let domain;
      props.domain && props.domain[axis] ? domain = props.domain[axis] : props.domain && Array.isArray(props.domain) && (domain = props.domain);
      scale = domain ? Collection.containsDates(domain) ? "time" : "linear" : void 0;
    }
    props = scale || getScaleTypeFromData(props, axis);
    return getScaleFromName(props);
  };
  exports.getDefaultScale = function() {
    return d3Scale.scaleLinear();
  };
  exports.getScaleFromName = getScaleFromName;
  exports.getScaleFromProps = getScaleFromProps;
  exports.getScaleType = function(props, axis) {
    if (props.scale && (props.scale.x || props.scale.y ? props.scale[axis] : 1)) {
      var JSCompiler_inline_result = props.scale[axis] || props.scale;
      JSCompiler_inline_result = "string" === typeof JSCompiler_inline_result ? JSCompiler_inline_result : getType(JSCompiler_inline_result);
    } else {
      JSCompiler_inline_result = void 0;
    }
    return JSCompiler_inline_result || getScaleTypeFromData(props, axis);
  };
  exports.getType = getType;
  exports.validScale = validScale;
  var _isPlainObject2 = function(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }(require("module$node_modules$lodash$isPlainObject")), Helpers = _interopRequireWildcard(require("module$node_modules$victory_core$lib$victory_util$helpers")), Collection = _interopRequireWildcard(require("module$node_modules$victory_core$lib$victory_util$collection")), d3Scale = _interopRequireWildcard(require("module$node_modules$victory_vendor$lib$d3_scale"));
  const supportedScaleStrings = ["linear", "time", "log", "sqrt"], DUCK_TYPES = [{name:"quantile", method:"quantiles"}, {name:"log", method:"base"}];
};

//# sourceMappingURL=module$node_modules$victory_core$lib$victory_util$scale.js.map
