{
"version":3,
"file":"module$node_modules$lodash$_arrayAggregator.js",
"lineCount":10,
"mappings":"AAAAA,cAAA,CAAA,2CAAA,GAAgE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAsBxGD,QAAOC,CAAAA,OAAP,GAXAC,QAAwB,CAACC,KAAD,EAAQC,MAAR,EAAgBC,QAAhB,EAA0BC,WAA1B,CAAuC;AAI7D,SAJ6D,IACzDC,QAAQ,CAAC,CADgD,EAEzDC,SAAkB,IAAT,IAAAL,KAAA,GAAgB,CAAhB,GAAoBA,KAAMK,CAAAA,MAEvC,EAAO,EAAED,KAAT,GAAiBC,MAAjB,CAAA,CAAyB;AACvB,UAAIC,QAAQN,KAAA,CAAMI,KAAN,CAAZ;AACAH,YAAA,CAAOE,WAAP,EAAoBG,KAApB,EAA2BJ,QAAA,CAASI,KAAT,CAA3B,EAA4CN,KAA5C,CAAA;AAFuB;AAIzB,WAAOG,WAAP;AAR6D,GAW/D;AAtBwG,CAAxG;;",
"sources":["node_modules/lodash/_arrayAggregator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_arrayAggregator\"] = function(global,require,module,exports) {\n/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n\n};"],
"names":["shadow$provide","global","require","module","exports","arrayAggregator","array","setter","iteratee","accumulator","index","length","value"]
}
