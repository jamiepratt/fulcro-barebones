shadow$provide.module$node_modules$victory_core$lib$victory_util$hooks$use_animation_state = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.useAnimationState = void 0;
  var _defaults2 = _interopRequireDefault(require("module$node_modules$lodash$defaults")), _react = _interopRequireDefault(require("module$node_modules$react$index")), Collection = _interopRequireWildcard(require("module$node_modules$victory_core$lib$victory_util$collection")), Transitions = _interopRequireWildcard(require("module$node_modules$victory_core$lib$victory_util$transitions"));
  const INITIAL_STATE = {nodesShouldLoad:!1, nodesDoneLoad:!1, animating:!0};
  exports.useAnimationState = function(initialState) {
    void 0 === initialState && (initialState = INITIAL_STATE);
    const [state, _setState] = _react.default.useState(initialState), setState = _react.default.useCallback(newState => {
      _setState(oldState => ({...oldState, ...newState}));
    }, [_setState]);
    initialState = _react.default.useCallback((props, child, index) => {
      if (!props?.animate) {
        return child.props.animate;
      }
      let getTransitions = props.animate && props.animate.getTransitions;
      const filteredState = (() => {
        let childrenTransitions = state && state.childrenTransitions;
        childrenTransitions = Collection.isArrayOfArrays(childrenTransitions) ? childrenTransitions[index] : childrenTransitions;
        return (0,_defaults2.default)({childrenTransitions}, state);
      })(), parentState = props.animate && props.animate.parentState || filteredState;
      if (!getTransitions) {
        const getTransitionProps = Transitions.getTransitionPropsFactory(props, filteredState, newState => setState(newState));
        getTransitions = childComponent => getTransitionProps(childComponent, index);
      }
      return (0,_defaults2.default)({getTransitions, parentState}, props.animate, child.props.animate);
    }, [state, setState]);
    const setAnimationState = _react.default.useCallback((props, nextProps) => {
      if (props?.animate) {
        if (props.animate.parentState) {
          props = (0,_defaults2.default)({oldProps:props.animate.parentState.nodesWillExit ? props : null, nextProps}, props.animate.parentState), setState(props);
        } else {
          const oldChildren = _react.default.Children.toArray(props.children), nextChildren = _react.default.Children.toArray(nextProps.children), isContinuous = child => {
            const check = c => c.type && c.type.continuous;
            return Array.isArray(child) ? child.some(check) : child.type && child.type.continuous;
          }, continuous = !props.polar && oldChildren.some(child => isContinuous(child) || child?.props?.children && isContinuous(child.props.children)), {nodesWillExit, nodesWillEnter, childrenTransitions, nodesShouldEnter} = Transitions.getInitialTransitionState(oldChildren, nextChildren);
          setState({nodesWillExit, nodesWillEnter, nodesShouldEnter, childrenTransitions:Collection.isArrayOfArrays(childrenTransitions) ? childrenTransitions[0] : childrenTransitions, oldProps:nodesWillExit ? props : void 0, nextProps, continuous});
        }
      }
    }, [setState]), getProps = _react.default.useCallback(initialProps => state && state.nodesWillExit ? state.oldProps || initialProps : initialProps, [state]);
    return {state, setState, getAnimationProps:initialState, setAnimationState, getProps};
  };
};

//# sourceMappingURL=module$node_modules$victory_core$lib$victory_util$hooks$use_animation_state.js.map
