{
"version":3,
"file":"module$node_modules$lodash$_baseToString.js",
"lineCount":19,
"mappings":"AAAAA,cAAA,CAAA,wCAAA,GAA6D,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAqBrGC,UAASA,aAAY,CAACC,KAAD,CAAQ;AAE3B,QAAoB,QAApB,IAAI,MAAOA,MAAX;AACE,aAAOA,KAAP;AADF;AAGA,QAAIC,OAAA,CAAQD,KAAR,CAAJ;AAEE,aAAOE,QAAA,CAASF,KAAT,EAAgBD,YAAhB,CAAP,GAAuC,EAAvC;AAFF;AAIA,QAAII,QAAA,CAASH,KAAT,CAAJ;AACE,aAAOI,cAAA,GAAiBA,cAAeC,CAAAA,IAAf,CAAoBL,KAApB,CAAjB,GAA8C,EAArD;AADF;AAGA,QAAIM,SAAUN,KAAVM,GAAkB,EAAtB;AACA,WAAkB,GAAX,IAACA,MAAD,IAAmB,CAAnB,GAAuBN,KAAvB,IAAiC,CAACO,QAAlC,GAA8C,IAA9C,GAAqDD,MAA5D;AAb2B;AApBzBE,QAAAA,GAASZ,OAAA,CAAQ,oCAAR,CAATY;AADiG,MAEjGN,WAAWN,OAAA,CAAQ,sCAAR,CAFsF,EAGjGK,UAAUL,OAAA,CAAQ,oCAAR,CAHuF,EAIjGO,WAAWP,OAAA,CAAQ,qCAAR,CAJsF,EAOjGW,WAAW,CAAXA,GAAe,CAPkF,EAWjGH,iBAAiB,CADjBK,OACiB,GADHD,MAAA,GAASA,MAAOE,CAAAA,SAAhB,GAA4BC,IAAAA,EACzB,IAAcF,OAAYG,CAAAA,QAA1B,GAAqCD,IAAAA,EAX2C;AAqCrGd,QAAOC,CAAAA,OAAP,GAAiBC,YAAjB;AArCqG,CAArG;;",
"sources":["node_modules/lodash/_baseToString.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_baseToString\"] = function(global,require,module,exports) {\nvar Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n\n};"],
"names":["shadow$provide","global","require","module","exports","baseToString","value","isArray","arrayMap","isSymbol","symbolToString","call","result","INFINITY","Symbol","symbolProto","prototype","undefined","toString"]
}
