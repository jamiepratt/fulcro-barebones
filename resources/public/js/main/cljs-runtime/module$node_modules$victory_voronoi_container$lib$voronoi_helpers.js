shadow$provide.module$node_modules$victory_voronoi_container$lib$voronoi_helpers = function(global, require, module, exports) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.VoronoiHelpers = void 0;
  var _throttle2 = _interopRequireDefault(require("module$node_modules$lodash$throttle")), _isRegExp2 = _interopRequireDefault(require("module$node_modules$lodash$isRegExp")), _isEmpty2 = _interopRequireDefault(require("module$node_modules$lodash$isEmpty")), _victoryCore = require("module$node_modules$victory_core$lib$index"), _reactFastCompare = _interopRequireDefault(require("module$node_modules$react_fast_compare$index")), _index = _interopRequireDefault(require("module$node_modules$delaunay_find$lib$index")), 
  _react = _interopRequireDefault(require("module$node_modules$react$index"));
  class VoronoiHelpersClass {
    constructor() {
      this.onMouseLeave = (evt, targetProps) => {
        evt = targetProps.activePoints || [];
        this.onDeactivated(targetProps, evt);
        evt = evt.length ? evt.map(point => this.getInactiveMutations(targetProps, point)) : [];
        return this.getParentMutation([]).concat(...evt);
      };
      this.handleMouseMove = (evt, targetProps) => {
        var activePoints = targetProps.activePoints || [], parentSVG = targetProps.parentSVG || _victoryCore.Selection.getParentSVG(evt);
        evt = _victoryCore.Selection.getSVGEventCoordinates(evt, parentSVG);
        if (!this.withinBounds(targetProps, evt)) {
          return this.onDeactivated(targetProps, activePoints), activePoints = activePoints.length ? activePoints.map(point => this.getInactiveMutations(targetProps, point)) : [], this.getParentMutation([], evt, parentSVG).concat(...activePoints);
        }
        const {points = [], index} = this.getVoronoiPoints(targetProps, evt);
        parentSVG = this.getParentMutation(points, evt, parentSVG, index);
        if (activePoints.length && (0,_reactFastCompare.default)(points, activePoints)) {
          return parentSVG;
        }
        this.onActivated(targetProps, points);
        this.onDeactivated(targetProps, activePoints);
        evt = points.length ? points.map(point => this.getActiveMutations(targetProps, point)) : [];
        activePoints = activePoints.length ? activePoints.map(point => this.getInactiveMutations(targetProps, point)) : [];
        return parentSVG.concat(...activePoints, ...evt);
      };
      this.onMouseMove = (0,_throttle2.default)(this.handleMouseMove, 32, {leading:!0, trailing:!1});
    }
    withinBounds(props, point) {
      const {width, height, polar, origin, scale} = props;
      props = _victoryCore.Helpers.getPadding(props, "voronoiPadding");
      const {x, y} = point;
      return polar ? (point = Math.pow(x - origin.x, 2) + Math.pow(y - origin.y, 2), props = Math.max(...scale.y.range()), point < Math.pow(props, 2)) : x >= props.left && x <= width - props.right && y >= props.top && y <= height - props.bottom;
    }
    getDatasets(props) {
      var JSCompiler_object_inline_x_1132 = _victoryCore.Collection.getMinValue(props.domain.x), JSCompiler_object_inline_y_1133 = _victoryCore.Collection.getMinValue(props.domain.y);
      const children = _react.default.Children.toArray(props.children), addMeta = (data, name, child) => {
        const continuous = child && child.type && child.type.continuous, style = child ? child.props && child.props.style : props.style;
        return data.map((datum, index) => {
          const {x, y, y0, x0} = _victoryCore.Helpers.getPoint(datum), voronoiX = (Number(x) + Number(x0)) / 2, voronoiY = (Number(y) + Number(y0)) / 2;
          return Object.assign({_voronoiX:"y" === props.voronoiDimension ? JSCompiler_object_inline_x_1132 : voronoiX, _voronoiY:"x" === props.voronoiDimension ? JSCompiler_object_inline_y_1133 : voronoiY, eventKey:index, childName:name, continuous, style}, datum);
        });
      };
      if (props.data) {
        return addMeta(props.data);
      }
      const getData = childProps => {
        childProps = _victoryCore.Data.getData(childProps);
        return Array.isArray(childProps) && 0 < childProps.length ? childProps : void 0;
      };
      return _victoryCore.Helpers.reduceChildren(children, (child, childName) => {
        const name = (child.props || {}).name || childName;
        var blacklist = props.voronoiBlacklist || [];
        childName = blacklist.filter(value => !!value && "string" === typeof value.valueOf());
        blacklist = blacklist.filter(_isRegExp2.default).some(regExp => regExp.test(name));
        return !_victoryCore.Data.isDataComponent(child) || childName.includes(name) || blacklist ? null : (childName = (child.type && _victoryCore.Helpers.isFunction(child.type.getData) ? child.type.getData : getData)(child.props)) ? addMeta(childName, name, child) : null;
      }, props);
    }
    findPoints(datasets, point) {
      return datasets.filter(d => point._voronoiX === d._voronoiX && point._voronoiY === d._voronoiY);
    }
    withinRadius(point, mousePosition, radius) {
      if (!point) {
        return !1;
      }
      if (!radius) {
        return !0;
      }
      const {x, y} = mousePosition;
      return Math.pow(x - point[0], 2) + Math.pow(y - point[1], 2) < Math.pow(radius, 2);
    }
    getVoronoiPoints(props, mousePosition) {
      const datasets = this.getDatasets(props), scaledData = datasets.map(d => {
        const {x, y} = _victoryCore.Helpers.scalePoint(props, d);
        return [x, y];
      }), index = _index.default.from(scaledData).find(mousePosition.x, mousePosition.y);
      return {points:this.withinRadius(scaledData[index], mousePosition, props.radius) ? this.findPoints(datasets, datasets[index]) : [], index};
    }
    getActiveMutations(props, point) {
      const {childName, continuous} = point, {activateData, activateLabels, labels} = props;
      if (!activateData && !activateLabels) {
        return [];
      }
      props = activateData ? ["data"] : [];
      props = labels && !activateLabels ? props : props.concat("labels");
      return (0,_isEmpty2.default)(props) ? [] : props.map(target => ({childName, eventKey:!0 === continuous && "data" === target ? "all" : point.eventKey, target, mutation:() => ({active:!0})}));
    }
    getInactiveMutations(props, point) {
      const {childName, continuous} = point, {activateData, activateLabels, labels} = props;
      if (!activateData && !activateLabels) {
        return [];
      }
      props = activateData ? ["data"] : [];
      props = labels && !activateLabels ? props : props.concat("labels");
      return (0,_isEmpty2.default)(props) ? [] : props.map(target => ({childName, eventKey:continuous && "data" === target ? "all" : point.eventKey, target, mutation:() => null}));
    }
    getParentMutation(activePoints, mousePosition, parentSVG, vIndex) {
      return [{target:"parent", eventKey:"parent", mutation:() => ({activePoints, mousePosition, parentSVG, vIndex})}];
    }
    onActivated(props, points) {
      if (_victoryCore.Helpers.isFunction(props.onActivated)) {
        props.onActivated(points, props);
      }
    }
    onDeactivated(props, points) {
      if (_victoryCore.Helpers.isFunction(props.onDeactivated)) {
        props.onDeactivated(points, props);
      }
    }
  }
  exports.VoronoiHelpers = new VoronoiHelpersClass();
};

//# sourceMappingURL=module$node_modules$victory_voronoi_container$lib$voronoi_helpers.js.map
