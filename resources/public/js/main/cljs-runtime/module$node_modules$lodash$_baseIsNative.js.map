{
"version":3,
"file":"module$node_modules$lodash$_baseIsNative.js",
"lineCount":8,
"mappings":"AAAAA,cAAA,CAAA,wCAAA,GAA6D,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAAA,MACjGC,aAAaH,OAAA,CAAQ,uCAAR,CADoF,EAEjGI,WAAWJ,OAAA,CAAQ,sCAAR,CAFsF,EAGjGK,WAAWL,OAAA,CAAQ,qCAAR,CAHsF,EAIjGM,WAAWN,OAAA,CAAQ,sCAAR,CAJsF,EAajGO,eAAe,6BAbkF,EA0BjGC,aAAaC,MAAA,CAAO,GAAP,GAVDC,QAASC,CAAAA,SAIIC,CAAAA,QAOdC,CAAAA,IAAb,CAVgBC,MAAOH,CAAAA,SAMQI,CAAAA,cAI/B,CAAkCC,CAAAA,OAAlC,CAjBiBC,qBAiBjB,EAAwD,SAAxD,CACCD,CAAAA,OADD,CACS,wDADT,EACmE,OADnE,CADe;AAE+D,KAF/D,CA1BoF;AA+CrGf,QAAOC,CAAAA,OAAP,GARAgB,QAAqB,CAACC,KAAD,CAAQ;AAC3B,WAAI,CAACd,QAAA,CAASc,KAAT,CAAL,IAAwBf,QAAA,CAASe,KAAT,CAAxB,GACS,CAAA,CADT,GAIeC,CADDjB,UAAA,CAAWgB,KAAX,CAAAE,GAAoBb,UAApBa,GAAiCd,YAChCa,EAAAA,IAAR,CAAad,QAAA,CAASa,KAAT,CAAb,CAJP;AAD2B,GAQ7B;AA/CqG,CAArG;;",
"sources":["node_modules/lodash/_baseIsNative.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_baseIsNative\"] = function(global,require,module,exports) {\nvar isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n\n};"],
"names":["shadow$provide","global","require","module","exports","isFunction","isMasked","isObject","toSource","reIsHostCtor","reIsNative","RegExp","Function","prototype","toString","call","Object","hasOwnProperty","replace","reRegExpChar","baseIsNative","value","test","pattern"]
}
