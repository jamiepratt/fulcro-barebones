shadow$provide.module$node_modules$victory_core$lib$victory_util$collection = function(global, require, module, exports) {
  function isNonEmptyArray(collection) {
    return Array.isArray(collection) && 0 < collection.length;
  }
  function containsDates(collection) {
    return Array.isArray(collection) && collection.some(value => value instanceof Date);
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.containsDates = containsDates;
  exports.containsNumbers = function(collection) {
    return Array.isArray(collection) && collection.some(value => "number" === typeof value);
  };
  exports.containsOnlyStrings = function(collection) {
    return isNonEmptyArray(collection) && collection.every(value => "string" === typeof value);
  };
  exports.containsStrings = function(collection) {
    return Array.isArray(collection) && collection.some(value => "string" === typeof value);
  };
  exports.difference = function(a, b) {
    return a && b ? a.filter(value => !b.includes(value)) : [];
  };
  exports.getMaxValue = function(arr) {
    for (var _len = arguments.length, values = Array(1 < _len ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      values[_key - 1] = arguments[_key];
    }
    _len = arr.concat(values);
    return containsDates(_len) ? new Date(Math.max(..._len)) : Math.max(..._len);
  };
  exports.getMinValue = function(arr) {
    for (var _len2 = arguments.length, values = Array(1 < _len2 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      values[_key2 - 1] = arguments[_key2];
    }
    _len2 = arr.concat(values);
    return containsDates(_len2) ? new Date(Math.min(..._len2)) : Math.min(..._len2);
  };
  exports.isArrayOfArrays = function(collection) {
    return isNonEmptyArray(collection) && collection.every(Array.isArray);
  };
  exports.removeUndefined = function(arr) {
    return arr.filter(el => void 0 !== el);
  };
};

//# sourceMappingURL=module$node_modules$victory_core$lib$victory_util$collection.js.map
