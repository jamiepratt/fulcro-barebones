{
"version":3,
"file":"module$node_modules$lodash$_equalArrays.js",
"lineCount":48,
"mappings":"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",
"sources":["node_modules/lodash/_equalArrays.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_equalArrays\"] = function(global,require,module,exports) {\nvar SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n\n};"],
"names":["shadow$provide","global","require","module","exports","SetCache","arraySome","cacheHas","equalArrays","array","other","bitmask","customizer","equalFunc","stack","isPartial","COMPARE_PARTIAL_FLAG","arrLength","length","othLength","arrStacked","get","othStacked","index","result","seen","COMPARE_UNORDERED_FLAG","undefined","set","arrValue","othValue","compared","othIndex","push"]
}
