shadow$provide.module$node_modules$victory_core$lib$victory_util$style = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.getColorScale = function(name) {
    const scales = {grayscale:["#cccccc", "#969696", "#636363", "#252525"], qualitative:"#334D5C #45B29D #EFC94C #E27A3F #DF5A49 #4F7DA1 #55DBC1 #EFDA97 #E2A37F #DF948A".split(" "), heatmap:["#428517", "#77D200", "#D6D305", "#EC8E19", "#C92B05"], warm:["#940031", "#C43343", "#DC5429", "#FF821D", "#FFAF55"], cool:["#2746B9", "#0B69D4", "#2794DB", "#31BB76", "#60E83B"], red:["#FCAE91", "#FB6A4A", "#DE2D26", "#A50F15", "#750B0E"], blue:["#002C61", "#004B8F", "#006BC9", "#3795E5", "#65B4F4"], green:["#354722", 
    "#466631", "#649146", "#8AB25C", "#A9C97E"]};
    return name ? scales[name] : scales.grayscale;
  };
  exports.toTransformString = void 0;
  const toTransformString = function(obj) {
    for (var _len = arguments.length, more = Array(1 < _len ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      more[_key - 1] = arguments[_key];
    }
    if (0 < more.length) {
      return more.reduce((memo, currentObj) => [memo, toTransformString(currentObj)].join(" "), toTransformString(obj)).trim();
    }
    if (void 0 === obj || null === obj || "string" === typeof obj) {
      return obj;
    }
    _len = [];
    for (const key in obj) {
      obj.hasOwnProperty(key) && _len.push(`${key}(${obj[key]})`);
    }
    return _len.join(" ").trim();
  };
  exports.toTransformString = toTransformString;
};

//# sourceMappingURL=module$node_modules$victory_core$lib$victory_util$style.js.map
