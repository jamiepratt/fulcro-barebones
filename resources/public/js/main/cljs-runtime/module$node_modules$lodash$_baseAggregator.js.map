{
"version":3,
"file":"module$node_modules$lodash$_baseAggregator.js",
"lineCount":10,
"mappings":"AAAAA,cAAA,CAAA,0CAAA,GAA+D,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AACvG,MAAIC,WAAWH,OAAA,CAAQ,sCAAR,CAAf;AAoBAC,QAAOC,CAAAA,OAAP,GAPAE,QAAuB,CAACC,UAAD,EAAaC,MAAb,EAAqBC,QAArB,EAA+BC,WAA/B,CAA4C;AACjEL,YAAA,CAASE,UAAT,EAAqB,QAAQ,CAACI,KAAD,EAAQC,GAAR,EAAaL,UAAb,CAAyB;AACpDC,YAAA,CAAOE,WAAP,EAAoBC,KAApB,EAA2BF,QAAA,CAASE,KAAT,CAA3B,EAA4CJ,UAA5C,CAAA;AADoD,KAAtD,CAAA;AAGA,WAAOG,WAAP;AAJiE,GAOnE;AArBuG,CAAvG;;",
"sources":["node_modules/lodash/_baseAggregator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_baseAggregator\"] = function(global,require,module,exports) {\nvar baseEach = require('./_baseEach');\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n\n};"],
"names":["shadow$provide","global","require","module","exports","baseEach","baseAggregator","collection","setter","iteratee","accumulator","value","key"]
}
