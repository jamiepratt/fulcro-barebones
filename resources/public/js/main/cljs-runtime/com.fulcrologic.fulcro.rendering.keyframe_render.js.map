{"version":3,"sources":["com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],"mappings":";;AAWA;;;;;sEAAA,tEAAMA,oJAIHC,QAAIC;AAJP,AAKE,8DAAA,9DAACC;;AACD,IAAAC,kCAAUI;IAAVH,qCACUI;IADVH,kCAAwBL;IAAxBM,qCACwB,AAACG,uEAAYT;AADrC,AAAA,qDAAAK,pDAAUE;;AAAV,wDAAAD,vDACUE;;AADV,IAAA,AAEE,IAAAE,aAAgEV;IAAhEU,iBAAA,AAAAC,4BAAAD;mBAAA,AAAAE,4CAAAF,eAAA,1EAAiDK;IAAjDF,aAAA,AAAAC,gBACuFC;IADvFF,iBAAA,AAAAF,4BAAAE;mBAAA,AAAAD,4CAAAC,eAAA,1EACiDG;iBADjD,AAAAJ,4CAAAC,eAAA,xEAC8DI;iBAD9D,AAAAL,4CAAAC,eAAA,xEACyEK;IACnEC,UAAU,iBAAAC,mBAAI,+DAAA,/DAACC,uDAAiBrB;AAAtB,AAAA,oBAAAoB;AAAAA;;AAAkDE;;;IAC5DC,QAAU,AAACC,0EAAeP,WAAWhB;IACrCwB,YAAU,kBAAIF,OACF,AAACG,0DAAaH,MAAMtB,UAAUA,WAC9BA;AANlB,AAOE,oBAAM,iBAAA0B,oBAAKR;AAAL,AAAA,oBAAAQ;AAAQX;;AAARW;;;AAAN,AACE,IAAAC,WAAI,CAACZ,6CAAAA,wDAAAA,bAAaS,qCAAAA;IAAlBI,WAA6BX;AAA7B,AAAA,sFAAAU,SAAAC,+BAAAD,SAAAC,/HAACV,wCAAAA,2DAAAA;;AADH;;UATJ,AAAA,wDAAAf,vDACUI;;AADV,qDAAAL,pDAAUI;;AAYZ;;;;;;;;;;;;gEAAA,gFAAAuB,hJAAME,wIAWHhC;AAXH,AAAA,IAAA+B,aAAAD;IAAAC,iBAAA,AAAApB,4BAAAoB;wBAAA,AAAAnB,4CAAAmB,eAAA,/EAWeE;qBAXf,AAAArB,4CAAAmB,eAAA,5EAW2BG;AAX3B,AAYE,IAAAC,aAA2EnC;IAA3EmC,iBAAA,AAAAxB,4BAAAwB;mBAAA,AAAAvB,4CAAAuB,eAAA,1EAAiDpB;iBAAjD,AAAAH,4CAAAuB,eAAA,xEAA8DE;IAA9DD,aAAA,AAAAtB,gBACuFC;IADvFqB,iBAAA,AAAAzB,4BAAAyB;mBAAA,AAAAxB,4CAAAwB,eAAA,1EACiDpB;iBADjD,AAAAJ,4CAAAwB,eAAA,xEAC8DnB;iBAD9D,AAAAL,4CAAAwB,eAAA,xEACyElB;IACnEC,UAAiB,kBAAIe,gBACF,iBAAAd,mBAAI,+DAAA,/DAACC,uDAAiBrB;AAAtB,AAAA,oBAAAoB;AAAAA;;AAAA,IAAAA,uBAAmDkB;AAAnD,AAAA,oBAAAlB;AAAAA;;AAA+EE;;;KAC/E,iBAAAF,mBAAI,+DAAA,/DAACC,uDAAiBrB;AAAtB,AAAA,oBAAAoB;AAAAA;;AAAkDE;;;gBAJ3E,AAAAR,ZAKMb,4BAAkBoC;IAClBd,QAAiB,AAACC,0EAAeP,WAAWhB;IAC5CwB,YAAiB,kBAAIF,OACF,AAACG,0DAAaH,MAAMtB,UAAUA,WAC9BA;IACnBsC,WACkB,gCAAA,dAAMvB;AACJ,oBAAMiB;AAAN,AAAkB,8DAAA,9DAAC/B;;AAAnB;;AACA,IAAAsC,kCAAUjC;IAAVkC,qCACUK;IADVJ,qCAEUlC;IAFVmC,kCAAwB3C;IAAxB4C,qCAAA;IAAAC,qCAEwB,AAACpC,uEAAYT;AAFrC,AAAA,qDAAA2C,pDAAUpC;;AAAV,wDAAAqC,vDACUE;;AADV,wDAAAD,vDAEUrC;;AAFV,IAAA,AAGE,IAAAuC,WAAI,CAAC/B,6CAAAA,wDAAAA,bAAaS,qCAAAA;IAAlBuB,WAA6B9B;AAA7B,AAAA,sFAAA6B,SAAAC,+BAAAD,SAAAC,/HAAC7B,wCAAAA,2DAAAA;UAHH,AAAA,wDAAAuB,vDAEUlC;;AAFV,wDAAAiC,vDACUK;;AADV,qDAAAN,pDAAUjC;;CAFZ;AAXxB,AAiBE,gFAAA,hFAAC0C,mDAAMlC,aAAamC,+IAAmDX;;AAC9DA","names":["com.fulcrologic.fulcro.rendering.keyframe-render/render-state!","app","state-map","com.fulcrologic.fulcro.components/enable-forced-refresh!","*app*-orig-val__58165","*shared*-orig-val__58166","*app*-temp-val__58167","*shared*-temp-val__58168","com.fulcrologic.fulcro.components/*app*","com.fulcrologic.fulcro.components/*shared*","com.fulcrologic.fulcro.components.shared","map__58170","cljs.core/--destructure-map","cljs.core.get","map__58171","cljs.core/deref","runtime-atom","root-factory","root-class","mount-node","r!","or__5045__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","js/module$node_modules$react_dom$index.render","query","com.fulcrologic.fulcro.components.get_query","data-tree","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","and__5043__auto__","G__58173","G__58174","p__58177","map__58178","com.fulcrologic.fulcro.rendering.keyframe-render/render!","force-root?","hydrate?","map__58180","map__58181","state-atom","js/module$node_modules$react_dom$index.hydrate","app-root","*app*-orig-val__58183","*parent*-orig-val__58184","*shared*-orig-val__58185","*app*-temp-val__58186","*parent*-temp-val__58187","*shared*-temp-val__58188","com.fulcrologic.fulcro.components/*parent*","G__58189","G__58190","cljs.core.swap_BANG_","cljs.core/assoc"],"sourcesContent":["(ns com.fulcrologic.fulcro.rendering.keyframe-render\n  \"The keyframe optimized render.\"\n  (:require\n    #?(:cljs\n       [\"react-dom\" :as react.dom])\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.raw.application :as rapp]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.components :as comp]\n    [taoensso.timbre :as log]))\n\n(defn render-state!\n  \"This function renders given state map over top of the current app. This allows you to render previews of state **without\n  actually changing the app state**. Used by Inspect for DOM preview. Forces a root-based render with no props diff optimization.\n  The app must already be mounted. Returns the result of render.\"\n  [app state-map]\n  (comp/enable-forced-refresh! 1000)\n  (binding [comp/*app*    app\n            comp/*shared* (comp/shared app)]\n    (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n          {:com.fulcrologic.fulcro.application/keys [root-factory root-class mount-node]} @runtime-atom\n          r!        (or (ah/app-algorithm app :render-root!) #?(:cljs react.dom/render))\n          query     (comp/get-query root-class state-map)\n          data-tree (if query\n                      (fdn/db->tree query state-map state-map)\n                      state-map)]\n      (when (and r! root-factory)\n        (r! (root-factory data-tree) mount-node)))))\n\n(defn render!\n  \"Render the UI. The keyframe render runs a full UI query and then asks React to render the root component.\n  The optimizations for this kind of render are purely those provided by `defsc`'s default\n  shouldComponentUpdate, which causes component to act like React PureComponent (though the props compare in cljs\n  is often faster).\n\n  If `:hydrate?` is true it will use the React hydrate functionality (on browsers) to render over\n  server-rendered content in the DOM.\n\n  If `:force-root? true` is included in the options map then not only will this do a keyframe update, it will also\n  force all components to return `true` from `shouldComponentUpdate`.\"\n  [app {:keys [force-root? hydrate?]}]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom state-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [root-factory root-class mount-node]} @runtime-atom\n        r!               (if hydrate?\n                           (or (ah/app-algorithm app :hydrate-root!) #?(:cljs react.dom/hydrate) #?(:cljs react.dom/render))\n                           (or (ah/app-algorithm app :render-root!) #?(:cljs react.dom/render)))\n        state-map        @state-atom\n        query            (comp/get-query root-class state-map)\n        data-tree        (if query\n                           (fdn/db->tree query state-map state-map)\n                           state-map)\n        app-root #?(:clj {}\n                    :cljs (when root-factory\n                            (when force-root? (comp/enable-forced-refresh! 1000))\n                            (binding [comp/*app*    app\n                                      comp/*parent* nil\n                                      comp/*shared* (comp/shared app)]\n                              (r! (root-factory data-tree) mount-node))))]\n    (swap! runtime-atom assoc :com.fulcrologic.fulcro.application/app-root app-root)\n    #?(:cljs app-root)))\n"],"x_google_ignoreList":[0]}