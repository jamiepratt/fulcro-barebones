shadow$provide.module$node_modules$victory_canvas$lib$canvas_bar = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.CanvasBar = void 0;
  var _react = function(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }(require("module$node_modules$react$index")), _victoryBar = require("module$node_modules$victory_bar$lib$index"), _useCanvasContext = require("module$node_modules$victory_canvas$lib$hooks$use_canvas_context");
  const evaluateProps = props => {
    const style = (0,_victoryBar.getStyle)(props.style, props), barWidth = (0,_victoryBar.getBarWidth)(props.barWidth, Object.assign({}, props, {style})), cornerRadius = (0,_victoryBar.getCornerRadius)(props.cornerRadius, Object.assign({}, props, {style, barWidth}));
    return Object.assign({}, props, {style, barWidth, cornerRadius});
  }, usePreviousValue = value => {
    const ref = _react.default.useRef();
    _react.default.useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  };
  exports.CanvasBar = props => {
    const {canvasRef} = (0,_useCanvasContext.useCanvasContext)(), modifiedProps = evaluateProps(props), {polar, style, barWidth, cornerRadius, origin} = modifiedProps, path2d = _react.default.useMemo(() => {
      const p = polar ? (0,_victoryBar.getPolarBarPath)(modifiedProps, cornerRadius) : (0,_victoryBar.getBarPath)(modifiedProps, barWidth, cornerRadius);
      return new Path2D(p);
    }, [polar, barWidth, cornerRadius, modifiedProps]), previousPath = usePreviousValue(path2d), draw = _react.default.useCallback((ctx, path) => {
      ctx.fillStyle = style.fill;
      ctx.strokeStyle = style.stroke;
      ctx.globalAlpha = style.fillOpacity;
      ctx.lineWidth = style.strokeWidth;
      polar && ctx.translate(origin?.x || 0, origin?.y || 0);
      ctx.fill(path);
      ctx.setTransform(1, 0, 0, 1, 0, 0);
    }, [style, origin, polar]), clearPreviousPath = _react.default.useCallback(ctx => {
      previousPath && (ctx.save(), ctx.lineWidth = (style.strokeWidth || 0) + 2, ctx.globalCompositeOperation = "destination-out", draw(ctx, previousPath), ctx.stroke(previousPath), ctx.restore());
    }, [draw, previousPath, style]);
    _react.default.useEffect(() => {
      const ctx = canvasRef.current?.getContext("2d");
      ctx && (clearPreviousPath(ctx), draw(ctx, path2d));
    }, [canvasRef, draw, polar, barWidth, cornerRadius, modifiedProps, path2d, clearPreviousPath]);
    return null;
  };
};

//# sourceMappingURL=module$node_modules$victory_canvas$lib$canvas_bar.js.map
