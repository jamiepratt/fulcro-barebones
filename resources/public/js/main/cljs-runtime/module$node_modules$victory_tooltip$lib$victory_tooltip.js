shadow$provide.module$node_modules$victory_tooltip$lib$victory_tooltip = function(global, require, module, exports) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.VictoryTooltip = void 0;
  var _orderBy2 = _interopRequireDefault(require("module$node_modules$lodash$orderBy")), _isPlainObject2 = _interopRequireDefault(require("module$node_modules$lodash$isPlainObject")), _uniqueId2 = _interopRequireDefault(require("module$node_modules$lodash$uniqueId")), _defaults2 = _interopRequireDefault(require("module$node_modules$lodash$defaults")), _react = _interopRequireDefault(require("module$node_modules$react$index")), _victoryCore = require("module$node_modules$victory_core$lib$index"), 
  _flyout = require("module$node_modules$victory_tooltip$lib$flyout");
  const fallbackProps = {cornerRadius:5, pointerLength:10, pointerWidth:10};
  class VictoryTooltip extends _react.default.Component {
    static $jscomp$static$init$2082474885$0$displayName() {
      return "VictoryTooltip";
    }
    static $jscomp$static$init$2082474885$1$role() {
      return "tooltip";
    }
    static $jscomp$static$init$2082474885$2$defaultProps() {
      return {active:!1, renderInPortal:!0, labelComponent:_react.default.createElement(_victoryCore.VictoryLabel, null), flyoutComponent:_react.default.createElement(_flyout.Flyout, null), groupComponent:_react.default.createElement("g", null)};
    }
    static defaultEvents(props) {
      const activate = props.activateData ? [{target:"labels", mutation:() => ({active:!0})}, {target:"data", mutation:() => ({active:!0})}] : [{target:"labels", mutation:() => ({active:!0})}], deactivate = props.activateData ? [{target:"labels", mutation:() => ({active:void 0})}, {target:"data", mutation:() => ({active:void 0})}] : [{target:"labels", mutation:() => ({active:void 0})}];
      return [{target:"data", eventHandlers:{onMouseOver:() => activate, onFocus:() => activate, onTouchStart:() => activate, onMouseOut:() => deactivate, onBlur:() => deactivate, onTouchEnd:() => deactivate}}];
    }
    constructor(props) {
      super(props);
      this.id = void 0 === props.id ? (0,_uniqueId2.default)("tooltip-") : props.id;
    }
    getDefaultOrientation(props) {
      const {datum, horizontal, polar} = props;
      return polar ? this.getPolarOrientation(props) : datum && 0 > datum.y ? horizontal ? "left" : "bottom" : horizontal ? "right" : "top";
    }
    getPolarOrientation(props) {
      const degrees = _victoryCore.LabelHelpers.getDegrees(props, props.datum);
      props = props.labelPlacement || "vertical";
      return "vertical" === props ? this.getVerticalOrientations(degrees) : "parallel" === props ? 90 > degrees || 270 < degrees ? "right" : "left" : 180 < degrees ? "bottom" : "top";
    }
    getVerticalOrientations(degrees) {
      return 45 > degrees || 315 < degrees ? "right" : 45 <= degrees && 135 >= degrees ? "top" : 135 < degrees && 225 > degrees ? "left" : "bottom";
    }
    getStyles(props) {
      var theme = props.theme || _victoryCore.VictoryTheme.grayscale;
      const defaultLabelStyles = theme && theme.tooltip && theme.tooltip.style ? theme.tooltip.style : {};
      var baseLabelStyle = Array.isArray(props.style) ? props.style.map(s => (0,_defaults2.default)({}, s, defaultLabelStyles)) : (0,_defaults2.default)({}, props.style, defaultLabelStyles);
      theme = theme && theme.tooltip && theme.tooltip.flyoutStyle ? theme.tooltip.flyoutStyle : {};
      theme = props.flyoutStyle ? (0,_defaults2.default)({}, props.flyoutStyle, theme) : theme;
      baseLabelStyle = Array.isArray(baseLabelStyle) ? baseLabelStyle.map(s => _victoryCore.Helpers.evaluateStyle(s, props)) : _victoryCore.Helpers.evaluateStyle(baseLabelStyle, props);
      theme = _victoryCore.Helpers.evaluateStyle(theme, Object.assign({}, props, {style:baseLabelStyle}));
      return {style:baseLabelStyle, flyoutStyle:theme};
    }
    getEvaluatedProps(props) {
      const {cornerRadius, centerOffset, dx, dy} = props;
      var active = _victoryCore.Helpers.evaluateProp(props.active, props), text = _victoryCore.Helpers.evaluateProp(props.text, Object.assign({}, props, {active}));
      if (void 0 === text || null === text) {
        text = "";
      }
      "number" === typeof text && (text = text.toString());
      const {style, flyoutStyle} = this.getStyles(Object.assign({}, props, {active, text})), orientation = _victoryCore.Helpers.evaluateProp(props.orientation, Object.assign({}, props, {active, text, style, flyoutStyle})) || this.getDefaultOrientation(props);
      var padding = _victoryCore.Helpers.evaluateProp(props.flyoutPadding, Object.assign({}, props, {active, text, style, flyoutStyle, orientation})) || this.getLabelPadding(style);
      padding = _victoryCore.Helpers.getPadding({padding});
      const pointerWidth = _victoryCore.Helpers.evaluateProp(props.pointerWidth, Object.assign({}, props, {active, text, style, flyoutStyle, orientation})), pointerLength = _victoryCore.Helpers.evaluateProp(props.pointerLength, Object.assign({}, props, {active, text, style, flyoutStyle, orientation})), labelSize = _victoryCore.TextSize.approximateTextSize(text, style), {flyoutHeight, flyoutWidth} = this.getDimensions(Object.assign({}, props, {style, flyoutStyle, active, text, orientation, flyoutPadding:padding, 
      pointerWidth, pointerLength}), labelSize);
      props = Object.assign({}, props, {active, text, style, flyoutStyle, orientation, flyoutHeight, flyoutWidth, flyoutPadding:padding, pointerWidth, pointerLength});
      active = (0,_isPlainObject2.default)(centerOffset) && void 0 !== centerOffset?.x ? _victoryCore.Helpers.evaluateProp(centerOffset.x, props) : 0;
      text = (0,_isPlainObject2.default)(centerOffset) && void 0 !== centerOffset?.y ? _victoryCore.Helpers.evaluateProp(centerOffset.y, props) : 0;
      return {...props, centerOffset:{x:active, y:text}, dx:void 0 !== dx ? _victoryCore.Helpers.evaluateProp(dx, props) : 0, dy:void 0 !== dy ? _victoryCore.Helpers.evaluateProp(dy, props) : 0, cornerRadius:_victoryCore.Helpers.evaluateProp(cornerRadius, props)};
    }
    getCalculatedValues(props) {
      const {style, text, flyoutStyle, flyoutHeight, flyoutWidth} = props, labelSize = _victoryCore.TextSize.approximateTextSize(text, style), flyoutDimensions = {height:flyoutHeight, width:flyoutWidth}, flyoutCenter = this.getFlyoutCenter(props, flyoutDimensions);
      props = this.getTransform(props);
      return {style, flyoutStyle, labelSize, flyoutDimensions, flyoutCenter, transform:props};
    }
    getTransform(props) {
      const {x, y, style} = props;
      return (props = (style || {}).angle || props.angle || this.getDefaultAngle(props)) ? `rotate(${props} ${x} ${y})` : void 0;
    }
    getDefaultAngle(props) {
      const {polar, labelPlacement, orientation, datum} = props;
      if (!polar || !labelPlacement || "vertical" === labelPlacement) {
        return 0;
      }
      props = _victoryCore.LabelHelpers.getDegrees(props, datum);
      let angle = 0;
      0 === props || 180 === props ? angle = "top" === orientation && 180 === props ? 270 : 90 : 0 < props && 180 > props ? angle = 90 - props : 180 < props && 360 > props && (angle = 270 - props);
      return angle + (90 < props && 180 > props || 270 < props ? 1 : -1) * ("perpendicular" === labelPlacement ? 0 : 90);
    }
    constrainTooltip(center, props, dimensions) {
      const {x, y} = center, {width, height} = dimensions;
      center = [0, props.width];
      props = [0, props.height];
      var JSCompiler_object_inline_x_1118 = [x - width / 2, x + width / 2];
      dimensions = [y - height / 2, y + height / 2];
      center = [JSCompiler_object_inline_x_1118[0] < center[0] ? center[0] - JSCompiler_object_inline_x_1118[0] : 0, JSCompiler_object_inline_x_1118[1] > center[1] ? JSCompiler_object_inline_x_1118[1] - center[1] : 0];
      props = [dimensions[0] < props[0] ? props[0] - dimensions[0] : 0, dimensions[1] > props[1] ? dimensions[1] - props[1] : 0];
      return {x:Math.round(x + center[0] - center[1]), y:Math.round(y + props[0] - props[1])};
    }
    getFlyoutCenter(props, dimensions) {
      const {x, y, dx, dy, pointerLength, orientation, constrainToVisibleArea, centerOffset} = props, {height, width} = dimensions;
      var xSign = "left" === orientation ? -1 : 1, ySign = "bottom" === orientation ? -1 : 1;
      xSign = "left" === orientation || "right" === orientation ? x + xSign * (pointerLength + width / 2 + xSign * dx) : x + dx;
      ySign = "top" === orientation || "bottom" === orientation ? y - ySign * (pointerLength + height / 2 - ySign * dy) : y + dy;
      xSign = (0,_isPlainObject2.default)(props.center) && void 0 !== props.center.x ? props.center.x : xSign;
      ySign = (0,_isPlainObject2.default)(props.center) && void 0 !== props.center.y ? props.center.y : ySign;
      ySign = {x:xSign + centerOffset.x, y:ySign + centerOffset.y};
      return constrainToVisibleArea ? this.constrainTooltip(ySign, props, dimensions) : ySign;
    }
    getLabelPadding(style) {
      if (!style) {
        return 0;
      }
      style = Array.isArray(style) ? style.map(s => s.padding) : [style.padding];
      return Math.max(...style, 0);
    }
    getDimensions(props, labelSize) {
      const {orientation, pointerLength, pointerWidth, flyoutHeight, flyoutWidth, flyoutPadding} = props, cornerRadius = _victoryCore.Helpers.evaluateProp(props.cornerRadius, props);
      return {flyoutHeight:flyoutHeight ? _victoryCore.Helpers.evaluateProp(flyoutHeight, props) : Math.max("top" === orientation || "bottom" === orientation ? 2 * cornerRadius : 2 * cornerRadius + pointerWidth, labelSize.height + flyoutPadding.top + flyoutPadding.bottom), flyoutWidth:flyoutWidth ? _victoryCore.Helpers.evaluateProp(flyoutWidth, props) : Math.max("left" === orientation || "right" === orientation ? 2 * cornerRadius + pointerLength : 2 * cornerRadius, labelSize.width + flyoutPadding.left + 
      flyoutPadding.right)};
    }
    getLabelProps(props, calculatedValues) {
      const {flyoutCenter, style, labelSize, dy = 0, dx = 0} = calculatedValues, {text, datum, activePoints, labelComponent, index, flyoutPadding} = props;
      props = (Array.isArray(style) && style.length ? style[0].textAnchor : style.textAnchor) || "middle";
      calculatedValues = _defaults2.default;
      var JSCompiler_temp_const = labelComponent.props, JSCompiler_temp_const$jscomp$0 = `${this.id}-label-${index}`;
      var JSCompiler_inline_result = props && "middle" !== props ? flyoutCenter.x - labelSize.width / 2 * ("end" === props ? -1 : 1) : flyoutCenter.x;
      return calculatedValues.call(_defaults2, {}, JSCompiler_temp_const, {key:JSCompiler_temp_const$jscomp$0, text, datum, activePoints, textAnchor:props, dy, dx, style, x:JSCompiler_inline_result + (flyoutPadding.left - flyoutPadding.right) / 2, y:flyoutCenter.y + (flyoutPadding.top - flyoutPadding.bottom) / 2, verticalAnchor:"middle", angle:style.angle});
    }
    getPointerOrientation(point, center, flyoutDimensions) {
      var JSCompiler_object_inline_bottom_1126 = center.y + flyoutDimensions.height / 2, JSCompiler_object_inline_top_1127 = center.y - flyoutDimensions.height / 2, JSCompiler_object_inline_left_1128 = center.x - flyoutDimensions.width / 2;
      center = center.x + flyoutDimensions.width / 2;
      return (0,_orderBy2.default)([{side:"top", val:JSCompiler_object_inline_top_1127 > point.y ? JSCompiler_object_inline_top_1127 - point.y : -1}, {side:"bottom", val:JSCompiler_object_inline_bottom_1126 < point.y ? point.y - JSCompiler_object_inline_bottom_1126 : -1}, {side:"right", val:center < point.x ? point.x - center : -1}, {side:"left", val:JSCompiler_object_inline_left_1128 > point.x ? JSCompiler_object_inline_left_1128 - point.x : -1}], "val", "desc")[0].side;
    }
    getFlyoutProps(props, calculatedValues) {
      const {flyoutDimensions, flyoutStyle, flyoutCenter} = calculatedValues, {x, y, dx, dy, datum, activePoints, index, pointerLength, pointerWidth, cornerRadius, events, flyoutComponent} = props;
      props = _victoryCore.Helpers.evaluateProp(props.pointerOrientation, props);
      return (0,_defaults2.default)({}, flyoutComponent.props, {x, y, dx, dy, datum, activePoints, index, pointerLength, pointerWidth, cornerRadius, events, orientation:props || this.getPointerOrientation({x, y}, flyoutCenter, flyoutDimensions), key:`${this.id}-tooltip-${index}`, width:flyoutDimensions.width, height:flyoutDimensions.height, style:flyoutStyle, center:flyoutCenter});
    }
    renderTooltip(props) {
      var active = _victoryCore.Helpers.evaluateProp(props.active, props);
      const {renderInPortal} = props;
      if (!active) {
        return renderInPortal ? _react.default.createElement(_victoryCore.VictoryPortal, null) : null;
      }
      active = this.getEvaluatedProps(props);
      const {flyoutComponent, labelComponent, groupComponent} = active;
      props = this.getCalculatedValues(active);
      active = [_react.default.cloneElement(flyoutComponent, this.getFlyoutProps(active, props)), _react.default.cloneElement(labelComponent, this.getLabelProps(active, props))];
      props = _react.default.cloneElement(groupComponent, {role:"presentation", transform:props.transform}, active);
      return renderInPortal ? _react.default.createElement(_victoryCore.VictoryPortal, null, props) : props;
    }
    render() {
      const props = _victoryCore.Helpers.modifyProps(this.props, fallbackProps, "tooltip");
      return this.renderTooltip(props);
    }
  }
  VictoryTooltip.displayName = VictoryTooltip.$jscomp$static$init$2082474885$0$displayName();
  VictoryTooltip.role = VictoryTooltip.$jscomp$static$init$2082474885$1$role();
  VictoryTooltip.defaultProps = VictoryTooltip.$jscomp$static$init$2082474885$2$defaultProps();
  exports.VictoryTooltip = VictoryTooltip;
};

//# sourceMappingURL=module$node_modules$victory_tooltip$lib$victory_tooltip.js.map
