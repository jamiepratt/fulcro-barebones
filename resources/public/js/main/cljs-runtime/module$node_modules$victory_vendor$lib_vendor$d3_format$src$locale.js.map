{
"version":3,
"file":"module$node_modules$victory_vendor$lib_vendor$d3_format$src$locale.js",
"lineCount":77,
"mappings":"AAAAA,cAAA,CAAA,kEAAA,GAAuF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAe/HC,UAASA,uBAAsB,CAACC,GAAD,CAAM;AAAE,WAAOA,GAAA,IAAOA,GAAIC,CAAAA,UAAX,GAAwBD,GAAxB,GAA8B,CAAEE,QAASF,GAAX,CAArC;AAAF;AAZrCG,QAAOC,CAAAA,cAAP,CAAsBN,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAP,SAAQI,CAAAA,OAAR,GAYAI,QAAiB,CAACC,MAAD,CAAS;AASxBC,YAASA,UAAS,CAACC,SAAD,CAAY;AAsC5BC,cAASA,OAAM,CAACL,KAAD,CAAQ;AAAA,YACjBM,cAAcC,MADG,EAEnBC,cAAcC,MAFK,EAInBC,CAJmB,EAKnBC,CALmB;AAMrB,YAAa,GAAb,KAAIC,IAAJ;AACEJ,qBACA,GADcK,UAAA,CAAWb,KAAX,CACd,GADkCQ,WAClC,EAAAR,KAAA,GAAQ,EAAR;AAFF,cAGO;AACLA,eAAA,GAAQ,CAACA,KAAT;AAGIc,cAAAA,IAAwB,CAAxBA,GAAgBd,KAAhBc,IAAyC,CAAzCA,GAA6B,CAA7BA,GAAiCd,KAAjCc;AAGJd,eAAA,GAAQe,KAAA,CAAMf,KAAN,CAAA,GAAegB,GAAf,GAAqBH,UAAA,CAAWI,IAAKC,CAAAA,GAAL,CAASlB,KAAT,CAAX,EAA4BmB,SAA5B,CAA7B;AAGIC,cAAJ,KAAUpB,KAAV,GAAkB,GAAIqB,WAAYxB,CAAAA,OAAhB,EAAyBG,KAAzB,CAAlB;AAGIc,WAAJ,IAAgC,CAAhC,KAAqB,CAACd,KAAtB,IAA8C,GAA9C,KAAqCsB,IAArC,KAAmDR,CAAnD,GAAmE,CAAA,CAAnE;AAGAR,qBAAA,IAAeQ,CAAA,GAAyB,GAAT,KAAAQ,IAAA,GAAeA,IAAf,GAAsBC,KAAtC,GAAuD,GAAT,KAAAD,IAAA,IAAyB,GAAzB,KAAgBA,IAAhB,GAA+B,EAA/B,GAAoCA,IAAjG,IAAyGhB,WAAzG;AACAE,qBAAA,IAAwB,GAAT,KAAAI,IAAA,GAAeY,QAAA,CAAS,CAAT,GAAaC,iBAAkBC,CAAAA,cAA/B,GAAgD,CAAhD,CAAf,GAAoE,EAAnF,IAAyFlB,WAAzF,IAAwGM,CAAA,IAA0B,GAA1B,KAAiBQ,IAAjB,GAAgC,GAAhC,GAAsC,EAA9I;AAIA,cAAIK,WAAJ;AAEE,iBADAC,CAAQ,GAAJ,CAAC,CAAG,EAAAlB,CAAA,GAAIV,KAAM6B,CAAAA,MAClB,EAAO,EAAED,CAAT,GAAalB,CAAb,CAAA;AACE,kBAAIC,CAAA,GAAIX,KAAM8B,CAAAA,UAAN,CAAiBF,CAAjB,CAAJ,EAAyB,EAAzB,GAA8BjB,CAA9B,IAAuC,EAAvC,GAAmCA,CAAvC,CAA+C;AAC7CH,2BAAA,IAAqB,EAAN,KAAAG,CAAA,GAAWoB,OAAX,GAAqB/B,KAAMgC,CAAAA,KAAN,CAAYJ,CAAZ,GAAgB,CAAhB,CAArB,GAA0C5B,KAAMgC,CAAAA,KAAN,CAAYJ,CAAZ,CAAzD,IAA2EpB,WAA3E;AACAR,qBAAA,GAAQA,KAAMgC,CAAAA,KAAN,CAAY,CAAZ,EAAeJ,CAAf,CAAR;AACA;AAH6C;AADjD;AAFF;AArBK;AAkCHK,aAAJ,IAAa,CAACC,IAAd,KAAoBlC,KAApB,GAA4BmC,KAAA,CAAMnC,KAAN,EAAaoC,QAAb,CAA5B;AAGIP,SAAAA,GAASvB,WAAYuB,CAAAA,MAArBA,GAA8B7B,KAAM6B,CAAAA,MAApCA,GAA6CrB,WAAYqB,CAAAA,MAAzDA;AACFQ,SAAAA,GAAUR,CAAA,GAASS,KAAT,GAAqBC,KAAJ,CAAUD,KAAV,GAAkBT,CAAlB,GAA2B,CAA3B,CAA8BW,CAAAA,IAA9B,CAAmCC,IAAnC,CAAjB,GAA4D,EAAtEJ;AAGEJ,aAAJ,IAAaC,IAAb,KAAmBlC,KAAwF,GAAhFmC,KAAA,CAAME,CAAN,GAAgBrC,KAAhB,EAAuBqC,CAAQR,CAAAA,MAAR,GAAiBS,KAAjB,GAAyB9B,WAAYqB,CAAAA,MAArC,GAA8CO,QAArE,CAAgF,EAAAC,CAAA,GAAU,EAArH;AAGA,eAAQK,KAAR;AACE,eAAK,MAAL;AACE1C,iBAAA,GAAQM,WAAR,GAAsBN,KAAtB,GAA8BQ,WAA9B,GAA4C6B,CAA5C;AACA;AACF,eAAK,MAAL;AACErC,iBAAA,GAAQM,WAAR,GAAsB+B,CAAtB,GAAgCrC,KAAhC,GAAwCQ,WAAxC;AACA;AACF,eAAK,GAAL;AACER,iBAAA,GAAQqC,CAAQL,CAAAA,KAAR,CAAc,CAAd,EAAiBH,CAAjB,GAA0BQ,CAAQR,CAAAA,MAAlC,IAA4C,CAA5C,CAAR,GAAyDvB,WAAzD,GAAuEN,KAAvE,GAA+EQ,WAA/E,GAA6F6B,CAAQL,CAAAA,KAAR,CAAcH,CAAd,CAA7F;AACA;AACF;AACE7B,iBAAA,GAAQqC,CAAR,GAAkB/B,WAAlB,GAAgCN,KAAhC,GAAwCQ,WAAxC;AAXJ;AAcA,eAAOmC,QAAA,CAAS3C,KAAT,CAAP;AAnEqB;AArCvBI,eAAA,GAAY,GAAIwC,gBAAiB/C,CAAAA,OAArB,EAA8BO,SAA9B,CAAZ;AAD4B,UAExBqC,OAAOrC,SAAUqC,CAAAA,IAFO,EAG1BC,QAAQtC,SAAUsC,CAAAA,KAHQ,EAI1BpB,OAAOlB,SAAUkB,CAAAA,IAJS,EAK1BuB,SAASzC,SAAUyC,CAAAA,MALO,EAM1BX,OAAO9B,SAAU8B,CAAAA,IANS,EAO1BI,QAAQlC,SAAUkC,CAAAA,KAPQ,EAQ1BL,QAAQ7B,SAAU6B,CAAAA,KARQ,EAS1Bd,YAAYf,SAAUe,CAAAA,SATI,EAU1BC,OAAOhB,SAAUgB,CAAAA,IAVS,EAW1BR,OAAOR,SAAUQ,CAAAA,IAXS;AAcf,SAAb,KAAIA,IAAJ,IAAkBqB,KAAc,GAAN,CAAA,CAAM,EAAArB,IAAA,GAAO,GAAvC,IAGUkC,YAAajD,CAAAA,OAAb,CAAqBe,IAArB,CAHV,KAGoDmC,IAAAA,EAA4C,KAA1D5B,SAA0D,KAA9BA,SAA8B,GAAlB,EAAkB,GAAbC,IAAa,GAAN,CAAA,CAAM,EAAAR,IAAA,GAAO,GAHvG,CAAA;AAMA,UAAIsB,IAAJ,IAAqB,GAArB,KAAYO,IAAZ,IAAsC,MAAtC,KAA4BC,KAA5B;AAA2CR,YAAyB,GAAlB,CAAA,CAAkB,EAAZO,IAAY,GAAL,GAAK,EAAAC,KAAA,GAAQ,MAAR;AAApE;AApB4B,UAwBxBnC,SAAoB,GAAX,KAAAsC,MAAA,GAAiBG,cAAjB,GAA6C,GAAX,KAAAH,MAAA,IAAkB,QAASI,CAAAA,IAAT,CAAcrC,IAAd,CAAlB,GAAwC,GAAxC,GAA8CA,IAAKsC,CAAAA,WAAL,EAA9C,GAAmE,EAxBtF,EAyB1BzC,SAAoB,GAAX,KAAAoC,MAAA,GAAiBM,cAAjB,GAAkC,MAAOF,CAAAA,IAAP,CAAYrC,IAAZ,CAAA,GAAoBwC,OAApB,GAA8B,EAzB/C,EA8BxBvC,aAAaiC,YAAajD,CAAAA,OAAb,CAAqBe,IAArB,CA9BW,EA+B1Be,cAAc,YAAasB,CAAAA,IAAb,CAAkBrC,IAAlB,CA/BY;AAqC5BO,eAAA,GAA0B4B,IAAAA,EAAd,KAAA5B,SAAA,GAA0B,CAA1B,GAA8B,QAAS8B,CAAAA,IAAT,CAAcrC,IAAd,CAAA,GAAsBK,IAAKoC,CAAAA,GAAL,CAAS,CAAT,EAAYpC,IAAKqC,CAAAA,GAAL,CAAS,EAAT,EAAanC,SAAb,CAAZ,CAAtB,GAA6DF,IAAKoC,CAAAA,GAAL,CAAS,CAAT,EAAYpC,IAAKqC,CAAAA,GAAL,CAAS,EAAT,EAAanC,SAAb,CAAZ,CAAvG;AAsEAd,YAAOkD,CAAAA,QAAP,GAAkBC,QAAS,EAAG;AAC5B,eAAOpD,SAAP,GAAmB,EAAnB;AAD4B,OAA9B;AAGA,aAAOC,MAAP;AA9G4B;AATN,QACpB8B,QAA4BY,IAAAA,EAApB,KAAA7C,MAAOuD,CAAAA,QAAP,IAAsDV,IAAAA,EAAtD,KAAiC7C,MAAOwD,CAAAA,SAAxC,GAAkEC,SAAU9D,CAAAA,OAA5E,GAAsF,GAAI+D,YAAa/D,CAAAA,OAAjB,EAA0BgE,GAAIC,CAAAA,IAAJ,CAAS5D,MAAOuD,CAAAA,QAAhB,EAA0BM,MAA1B,CAA1B,EAA6D7D,MAAOwD,CAAAA,SAApE,GAAgF,EAAhF,CAD1E,EAEtBV,iBAAqCD,IAAAA,EAApB,KAAA7C,MAAO8D,CAAAA,QAAP,GAAgC,EAAhC,GAAqC9D,MAAO8D,CAAAA,QAAP,CAAgB,CAAhB,CAArC,GAA0D,EAFrD,EAGtBb,iBAAqCJ,IAAAA,EAApB,KAAA7C,MAAO8D,CAAAA,QAAP,GAAgC,EAAhC,GAAqC9D,MAAO8D,CAAAA,QAAP,CAAgB,CAAhB,CAArC,GAA0D,EAHrD,EAItBjC,UAA6BgB,IAAAA,EAAnB,KAAA7C,MAAO6B,CAAAA,OAAP,GAA+B,GAA/B,GAAqC7B,MAAO6B,CAAAA,OAA5C,GAAsD,EAJ1C,EAKtBY,WAA+BI,IAAAA,EAApB,KAAA7C,MAAOyC,CAAAA,QAAP,GAAgCgB,SAAU9D,CAAAA,OAA1C,GAAoD,GAAIoE,eAAgBpE,CAAAA,OAApB,EAA6BgE,GAAIC,CAAAA,IAAJ,CAAS5D,MAAOyC,CAAAA,QAAhB;AAA0BuB,UAA1B,CAA7B,CALzC,EAMtBd,UAA6BL,IAAAA,EAAnB,KAAA7C,MAAOkD,CAAAA,OAAP,GAA+B,GAA/B,GAAqClD,MAAOkD,CAAAA,OAA5C,GAAsD,EAN1C,EAOtB7B,QAAyBwB,IAAAA,EAAjB,KAAA7C,MAAOqB,CAAAA,KAAP,GAA6B,GAA7B,GAAmCrB,MAAOqB,CAAAA,KAA1C,GAAkD,EAPpC,EAQtBP,MAAqB+B,IAAAA,EAAf,KAAA7C,MAAOc,CAAAA,GAAP,GAA2B,KAA3B,GAAmCd,MAAOc,CAAAA,GAA1C,GAAgD,EARhC;AAkIxB,WAAO,CACLX,OAAQF,SADH,EAELgE,aAXFA,QAAqB,CAAC/D,SAAD,EAAYJ,KAAZ,CAAmB;AAAA,UAClCoE,IAAIjE,SAAA,EAAWC,SAAA,GAAY,GAAIwC,gBAAiB/C,CAAAA,OAArB,EAA8BO,SAA9B,CAAZ,EAAsDA,SAAUQ,CAAAA,IAAhE,GAAuE,GAAvE,EAA4ER,SAAvF,EAD8B;AAEpCiE,eAAAA,GAA+E,CAA/EA,GAAIpD,IAAKoC,CAAAA,GAAL,CAAS,CAAC,CAAV,EAAapC,IAAKqC,CAAAA,GAAL,CAAS,CAAT,EAAYrC,IAAKqD,CAAAA,KAAL,CAAW,GAAIC,SAAU1E,CAAAA,OAAd,EAAuBG,KAAvB,CAAX,GAA2C,CAA3C,CAAZ,CAAb,CAAJqE;AAFoC,UAGpCG,IAAIvD,IAAKwD,CAAAA,GAAL,CAAS,EAAT,EAAa,CAACJ,SAAd,CAHgC,EAIpC9D,SAASiB,QAAA,CAAS,CAAT,GAAa6C,SAAb,GAAiB,CAAjB,CAJ2B;AAKtC,aAAO,QAAS,CAACrE,KAAD,CAAQ;AACtB,eAAOoE,CAAA,CAAEI,CAAF,GAAMxE,KAAN,CAAP,GAAsBO,MAAtB;AADsB,OAAxB;AALsC,KASjC,CAAP;AAlIwB,GAZ1B;AACA,MAAIgE,YAAY7E,sBAAA,CAAuBH,OAAA,CAAQ,sEAAR,CAAvB,CAAhB,EACIqE,eAAelE,sBAAA,CAAuBH,OAAA,CAAQ,yEAAR,CAAvB,CADnB,EAEI0E,kBAAkBvE,sBAAA,CAAuBH,OAAA,CAAQ,4EAAR,CAAvB,CAFtB,EAGIqD,mBAAmBlD,sBAAA,CAAuBH,OAAA,CAAQ,6EAAR,CAAvB,CAHvB;AAII8B,gBAAc3B,sBAAA,CAAuBH,OAAA,CAAQ,wEAAR,CAAvB,CAJlB,EAKIuD,eAAepD,sBAAA,CAAuBH,OAAA,CAAQ,yEAAR,CAAvB,CALnB,EAMIkC,oBAAoBlC,OAAA,CAAQ,8EAAR,CANxB,EAOIoE,YAAYjE,sBAAA,CAAuBH,OAAA,CAAQ,sEAAR,CAAvB,CAPhB,EASIsE,MAAMtB,KAAMmC,CAAAA,SAAUb,CAAAA,GAT1B,EAUErC;AAAW,oCAAA,CAAA,KAAA,CAAA,GAAA,CAVb;AAP+H,CAA/H;;",
"sources":["node_modules/victory-vendor/lib-vendor/d3-format/src/locale.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$victory_vendor$lib_vendor$d3_format$src$locale\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nvar _exponent = _interopRequireDefault(require(\"./exponent.js\"));\nvar _formatGroup = _interopRequireDefault(require(\"./formatGroup.js\"));\nvar _formatNumerals = _interopRequireDefault(require(\"./formatNumerals.js\"));\nvar _formatSpecifier = _interopRequireDefault(require(\"./formatSpecifier.js\"));\nvar _formatTrim = _interopRequireDefault(require(\"./formatTrim.js\"));\nvar _formatTypes = _interopRequireDefault(require(\"./formatTypes.js\"));\nvar _formatPrefixAuto = require(\"./formatPrefixAuto.js\");\nvar _identity = _interopRequireDefault(require(\"./identity.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nvar map = Array.prototype.map,\n  prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"\u00b5\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\nfunction _default(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity.default : (0, _formatGroup.default)(map.call(locale.grouping, Number), locale.thousands + \"\"),\n    currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n    currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n    decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n    numerals = locale.numerals === undefined ? _identity.default : (0, _formatNumerals.default)(map.call(locale.numerals, String)),\n    percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n    minus = locale.minus === undefined ? \"\u2212\" : locale.minus + \"\",\n    nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n  function newFormat(specifier) {\n    specifier = (0, _formatSpecifier.default)(specifier);\n    var fill = specifier.fill,\n      align = specifier.align,\n      sign = specifier.sign,\n      symbol = specifier.symbol,\n      zero = specifier.zero,\n      width = specifier.width,\n      comma = specifier.comma,\n      precision = specifier.precision,\n      trim = specifier.trim,\n      type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!_formatTypes.default[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n      suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = _formatTypes.default[type],\n      maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n    function format(value) {\n      var valuePrefix = prefix,\n        valueSuffix = suffix,\n        i,\n        n,\n        c;\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = (0, _formatTrim.default)(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? sign === \"(\" ? sign : minus : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer \u201cvalue\u201d part that can be\n        // grouped, and fractional or exponential \u201csuffix\u201d part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n        padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\":\n          value = valuePrefix + value + valueSuffix + padding;\n          break;\n        case \"=\":\n          value = valuePrefix + padding + value + valueSuffix;\n          break;\n        case \"^\":\n          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n          break;\n        default:\n          value = padding + valuePrefix + value + valueSuffix;\n          break;\n      }\n      return numerals(value);\n    }\n    format.toString = function () {\n      return specifier + \"\";\n    };\n    return format;\n  }\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = \"f\", specifier)),\n      e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,\n      k = Math.pow(10, -e),\n      prefix = prefixes[8 + e / 3];\n    return function (value) {\n      return f(k * value) + prefix;\n    };\n  }\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_default","locale","newFormat","specifier","format","valuePrefix","prefix","valueSuffix","suffix","n","c","type","formatType","valueNegative","isNaN","nan","Math","abs","precision","trim","_formatTrim","sign","minus","prefixes","_formatPrefixAuto","prefixExponent","maybeSuffix","i","length","charCodeAt","decimal","slice","comma","zero","group","Infinity","padding","width","Array","join","fill","align","numerals","_formatSpecifier","symbol","_formatTypes","undefined","currencyPrefix","test","toLowerCase","currencySuffix","percent","max","min","toString","format.toString","grouping","thousands","_identity","_formatGroup","map","call","Number","currency","_formatNumerals","String","formatPrefix","f","e","floor","_exponent","k","pow","prototype"]
}
