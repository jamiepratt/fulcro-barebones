shadow$provide.module$node_modules$victory_core$lib$victory_transition$victory_transition = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i], key;
        for (key in source) {
          Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.VictoryTransition = void 0;
  var _pick2 = _interopRequireDefault(require("module$node_modules$lodash$pick")), _defaults2 = _interopRequireDefault(require("module$node_modules$lodash$defaults")), _react = _interopRequireDefault(require("module$node_modules$react$index")), _victoryAnimation = require("module$node_modules$victory_core$lib$victory_animation$victory_animation"), Collection = _interopRequireWildcard(require("module$node_modules$victory_core$lib$victory_util$collection")), Helpers = _interopRequireWildcard(require("module$node_modules$victory_core$lib$victory_util$helpers")), 
  _timerContext = _interopRequireDefault(require("module$node_modules$victory_core$lib$victory_util$timer_context")), Transitions = _interopRequireWildcard(require("module$node_modules$victory_core$lib$victory_util$transitions")), _reactFastCompare = _interopRequireDefault(require("module$node_modules$react_fast_compare$index"));
  class VictoryTransition extends _react.default.Component {
    static $jscomp$static$init$m1589683870$0$displayName() {
      return "VictoryTransition";
    }
    static $jscomp$static$init$m1589683870$1$contextType() {
      return _timerContext.default;
    }
    constructor(props, context) {
      super(props, context);
      this.state = {nodesShouldLoad:!1, nodesDoneLoad:!1};
      props = this.props.children;
      this.continuous = !props.props.polar && props.type && !0 === props.type.continuous;
      this.timer = this.context.transitionTimer;
    }
    componentDidMount() {
      this.setState({nodesShouldLoad:!0});
    }
    shouldComponentUpdate(nextProps) {
      (0,_reactFastCompare.default)(this.props, nextProps) || (this.timer.bypassAnimation(), this.setState(this.getTransitionState(this.props, nextProps), () => this.timer.resumeAnimation()));
      return !0;
    }
    componentWillUnmount() {
      this.timer.stop();
    }
    getTransitionState(props, nextProps) {
      var {animate} = props;
      if (!animate) {
        return {};
      }
      if (animate.parentState) {
        return {oldProps:animate.parentState.nodesWillExit ? props : null, nextProps};
      }
      animate = _react.default.Children.toArray(props.children);
      const nextChildren = _react.default.Children.toArray(nextProps.children), {nodesWillExit, nodesWillEnter, childrenTransitions, nodesShouldEnter} = Transitions.getInitialTransitionState(animate, nextChildren);
      return {nodesWillExit, nodesWillEnter, childrenTransitions, nodesShouldEnter, oldProps:nodesWillExit ? props : null, nextProps};
    }
    getDomainFromChildren(props, axis) {
      const getChildDomains = children => children.reduce((memo, child) => child.type && Helpers.isFunction(child.type.getDomain) ? (child = child.props && child.type.getDomain(child.props, axis)) ? memo.concat(child) : memo : child.props && child.props.children ? memo.concat(getChildDomains(_react.default.Children.toArray(child.props.children))) : memo, []);
      props = _react.default.Children.toArray(props.children)[0];
      const childProps = props.props || {}, domain = Array.isArray(childProps.domain) ? childProps.domain : childProps.domain && childProps.domain[axis];
      if (!childProps.children && domain) {
        return domain;
      }
      props = getChildDomains([props]);
      return 0 === props.length ? [0, 1] : [Collection.getMinValue(props), Collection.getMaxValue(props)];
    }
    pickProps() {
      return this.state ? this.state.nodesWillExit ? this.state.oldProps || this.props : this.props : this.props;
    }
    pickDomainProps(props) {
      const parentState = props.animate?.parentState;
      return parentState && parentState.nodesWillExit ? this.continuous || parentState.continuous ? parentState.nextProps || this.state.nextProps || props : props : this.continuous && this.state.nodesWillExit ? this.state.nextProps || props : props;
    }
    getClipWidth(props, child) {
      const clipWidth = this.transitionProps ? this.transitionProps.clipWidth : void 0;
      props = void 0 !== clipWidth ? clipWidth : (child = Helpers.getRange(child.props, "x")) ? Math.abs(child[1] - child[0]) : props.width;
      return props;
    }
    render() {
      var props = this.pickProps(), getTransitionProps = this.props.animate?.getTransitions ? this.props.animate.getTransitions : Transitions.getTransitionPropsFactory(props, this.state, newState => this.setState(newState));
      const child = _react.default.Children.toArray(props.children)[0];
      this.transitionProps = getTransitionProps = getTransitionProps(child);
      const domain = {x:this.getDomainFromChildren(this.pickDomainProps(props), "x"), y:this.getDomainFromChildren(props, "y")}, clipWidth = this.getClipWidth(props, child), combinedProps = (0,_defaults2.default)({domain, clipWidth}, getTransitionProps, child.props);
      props = (props.animationWhitelist || []).concat(["clipWidth"]);
      props = props.length ? (0,_pick2.default)(combinedProps, props) : combinedProps;
      return _react.default.createElement(_victoryAnimation.VictoryAnimation, _extends({}, combinedProps.animate, {data:props}), newProps => {
        if (child.props.groupComponent) {
          const groupComponent = this.continuous ? _react.default.cloneElement(child.props.groupComponent, {clipWidth:newProps.clipWidth || 0}) : child.props.groupComponent;
          return _react.default.cloneElement(child, (0,_defaults2.default)({animate:null, animating:!0, groupComponent}, newProps, combinedProps));
        }
        return _react.default.cloneElement(child, (0,_defaults2.default)({animate:null, animating:!0}, newProps, combinedProps));
      });
    }
  }
  VictoryTransition.displayName = VictoryTransition.$jscomp$static$init$m1589683870$0$displayName();
  VictoryTransition.contextType = VictoryTransition.$jscomp$static$init$m1589683870$1$contextType();
  exports.VictoryTransition = VictoryTransition;
};

//# sourceMappingURL=module$node_modules$victory_core$lib$victory_transition$victory_transition.js.map
