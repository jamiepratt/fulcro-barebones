shadow$provide.module$node_modules$victory_area$lib$area = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.Area = void 0;
  var _react = function(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }(require("module$node_modules$react$index")), d3Shape = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$victory_vendor$lib$d3_shape")), _victoryCore = require("module$node_modules$victory_core$lib$index");
  const defined = d => {
    const y = void 0 !== d._y1 ? d._y1 : d._y;
    return null !== y && void 0 !== y && null !== d._y0;
  }, getXAccessor = scale => d => scale.x(void 0 !== d._x1 ? d._x1 : d._x), getYAccessor = scale => d => scale.y(void 0 !== d._y1 ? d._y1 : d._y), getY0Accessor = scale => d => scale.y(d._y0), getAngleAccessor = scale => d => -1 * scale.x(void 0 !== d._x1 ? d._x1 : d._x) + Math.PI / 2, defaultProps = {groupComponent:_react.default.createElement("g", null), pathComponent:_react.default.createElement(_victoryCore.Path, null), role:"presentation", shapeRendering:"auto"};
  exports.Area = initialProps => {
    initialProps = {...defaultProps, ...initialProps};
    var ariaLabel = _victoryCore.Helpers.evaluateProp(initialProps.ariaLabel, initialProps);
    var JSCompiler_inline_result = _victoryCore.Helpers.evaluateProp(initialProps.desc, initialProps);
    var id = _victoryCore.Helpers.evaluateProp(initialProps.id, initialProps), style = _victoryCore.Helpers.evaluateStyle(Object.assign({fill:"black"}, initialProps.style), initialProps);
    const tabIndex = _victoryCore.Helpers.evaluateProp(initialProps.tabIndex, initialProps);
    JSCompiler_inline_result = Object.assign({}, initialProps, {ariaLabel, desc:JSCompiler_inline_result, id, style, tabIndex});
    const {ariaLabel:ariaLabel$jscomp$0, role, shapeRendering, className, polar, origin, data, pathComponent, events, groupComponent, clipPath, id:id$jscomp$0, style:style$jscomp$0, desc, tabIndex:tabIndex$jscomp$0} = JSCompiler_inline_result;
    initialProps = _victoryCore.UserProps.getSafeUserProps(JSCompiler_inline_result);
    ariaLabel = polar && origin ? `translate(${origin.x}, ${origin.y})` : void 0;
    id = JSCompiler_inline_result.transform || ariaLabel;
    ariaLabel = style$jscomp$0.stroke && "none" !== style$jscomp$0.stroke && "transparent" !== style$jscomp$0.stroke;
    const {polar:polar$jscomp$0, scale} = JSCompiler_inline_result;
    style = _victoryCore.LineHelpers.getInterpolationFunction(JSCompiler_inline_result);
    if (polar$jscomp$0) {
      style = d3Shape.radialArea().defined(defined).curve(style).angle(getAngleAccessor(scale)).outerRadius(getYAccessor(scale)).innerRadius(getY0Accessor(scale));
    } else {
      const {horizontal, scale} = JSCompiler_inline_result;
      style = _victoryCore.LineHelpers.getInterpolationFunction(JSCompiler_inline_result);
      style = horizontal ? d3Shape.area().defined(defined).curve(style).x0(getY0Accessor(scale)).x1(getYAccessor(scale)).y(getXAccessor(scale)) : d3Shape.area().defined(defined).curve(style).x(getXAccessor(scale)).y1(getYAccessor(scale)).y0(getY0Accessor(scale));
    }
    JSCompiler_inline_result = ariaLabel && _victoryCore.LineHelpers.getLineFunction(JSCompiler_inline_result);
    id = {"aria-label":ariaLabel$jscomp$0, className, role, shapeRendering, transform:id, ...events, clipPath, tabIndex:tabIndex$jscomp$0};
    style = _react.default.cloneElement(pathComponent, Object.assign({key:`${id$jscomp$0}-area`, style:Object.assign({}, style$jscomp$0, {stroke:style$jscomp$0.stroke ? "none" : style$jscomp$0.fill}), d:style(data), desc, tabIndex:tabIndex$jscomp$0}, id, initialProps));
    JSCompiler_inline_result = ariaLabel ? _react.default.cloneElement(pathComponent, Object.assign({key:`${id$jscomp$0}-area-stroke`, style:Object.assign({}, style$jscomp$0, {fill:"none"}), d:JSCompiler_inline_result(data)}, id)) : null;
    return ariaLabel ? _react.default.cloneElement(groupComponent, initialProps, [style, JSCompiler_inline_result]) : style;
  };
};

//# sourceMappingURL=module$node_modules$victory_area$lib$area.js.map
