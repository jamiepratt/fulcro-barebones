shadow$provide.module$node_modules$victory_canvas$lib$canvas_point = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.CanvasPoint = void 0;
  var _react = function(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }(require("module$node_modules$react$index")), _victoryCore = require("module$node_modules$victory_core$lib$index"), _useCanvasContext = require("module$node_modules$victory_canvas$lib$hooks$use_canvas_context");
  const evaluateProps = props => {
    const size = _victoryCore.Helpers.evaluateProp(props.size, props), style = _victoryCore.Helpers.evaluateStyle(props.style, props), symbol = _victoryCore.Helpers.evaluateProp(props.symbol, props);
    return Object.assign({}, props, {size, style, symbol});
  };
  exports.CanvasPoint = props => {
    const {canvasRef} = (0,_useCanvasContext.useCanvasContext)(), modifiedProps = evaluateProps(props), draw = _react.default.useCallback(ctx => {
      var {style} = modifiedProps;
      {
        const {x, y, size, symbol} = modifiedProps;
        if (modifiedProps.getPath) {
          var JSCompiler_inline_result = modifiedProps.getPath(x, y, size);
        } else {
          JSCompiler_inline_result = {circle:_victoryCore.PointPathHelpers.circle, square:_victoryCore.PointPathHelpers.square, diamond:_victoryCore.PointPathHelpers.diamond, triangleDown:_victoryCore.PointPathHelpers.triangleDown, triangleUp:_victoryCore.PointPathHelpers.triangleUp, plus:_victoryCore.PointPathHelpers.plus, minus:_victoryCore.PointPathHelpers.minus, star:_victoryCore.PointPathHelpers.star, cross:_victoryCore.PointPathHelpers.cross}, JSCompiler_inline_result = ("function" === typeof JSCompiler_inline_result[symbol] ? 
          JSCompiler_inline_result[symbol] : JSCompiler_inline_result.circle)(x, y, size);
        }
      }
      ctx.fillStyle = style.fill;
      style = new Path2D(JSCompiler_inline_result);
      ctx.fill(style);
    }, [modifiedProps]);
    _react.default.useEffect(() => {
      const ctx = canvasRef.current?.getContext("2d");
      ctx && draw(ctx);
    }, []);
    return null;
  };
};

//# sourceMappingURL=module$node_modules$victory_canvas$lib$canvas_point.js.map
