shadow$provide.module$node_modules$victory_zoom_container$lib$victory_zoom_container = function(global, require, module, exports) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  function zoomContainerMixin(Base) {
    Base = class extends Base {
      static $jscomp$static$init$1916664067$0$displayName() {
        return "VictoryZoomContainer";
      }
      static $jscomp$static$init$1916664067$1$defaultProps() {
        return {..._victoryCore.VictoryContainer.defaultProps, clipContainerComponent:_react.default.createElement(_victoryCore.VictoryClipContainer, null), allowPan:!0, allowZoom:!0, zoomActive:!1};
      }
      static defaultEvents(props) {
        return [{target:"parent", eventHandlers:{onMouseDown:(evt, targetProps) => props.disable ? {} : _zoomHelpers.ZoomHelpers.onMouseDown(evt, targetProps), onTouchStart:(evt, targetProps) => props.disable ? {} : _zoomHelpers.ZoomHelpers.onMouseDown(evt, targetProps), onMouseUp:(evt, targetProps) => props.disable ? {} : _zoomHelpers.ZoomHelpers.onMouseUp(evt, targetProps), onTouchEnd:(evt, targetProps) => props.disable ? {} : _zoomHelpers.ZoomHelpers.onMouseUp(evt, targetProps), onMouseLeave:(evt, 
        targetProps) => props.disable ? {} : _zoomHelpers.ZoomHelpers.onMouseLeave(evt, targetProps), onTouchCancel:(evt, targetProps) => props.disable ? {} : _zoomHelpers.ZoomHelpers.onMouseLeave(evt, targetProps), onMouseMove:(evt, targetProps, eventKey, ctx) => props.disable ? {} : _zoomHelpers.ZoomHelpers.onMouseMove(evt, targetProps, eventKey, ctx), onTouchMove:(evt, targetProps, eventKey, ctx) => {
          if (props.disable) {
            return {};
          }
          evt.preventDefault();
          return _zoomHelpers.ZoomHelpers.onMouseMove(evt, targetProps, eventKey, ctx);
        }, ...(props.disable || !props.allowZoom ? {} : {onWheel:_zoomHelpers.ZoomHelpers.onWheel})}}];
      }
      clipDataComponents(children, props) {
        const {scale, clipContainerComponent, polar, origin, horizontal} = props;
        props = horizontal ? scale.y.range() : scale.x.range();
        const rangeY = horizontal ? scale.x.range() : scale.y.range(), plottableWidth = Math.abs(props[0] - props[1]), plottableHeight = Math.abs(rangeY[0] - rangeY[1]), radius = Math.max(...rangeY), groupComponent = _react.default.cloneElement(clipContainerComponent, {clipWidth:plottableWidth, clipHeight:plottableHeight, translateX:Math.min(...props), translateY:Math.min(...rangeY), polar, origin:polar ? origin : void 0, radius:polar ? radius : void 0, ...clipContainerComponent.props});
        return _react.default.Children.toArray(children).map(child => _victoryCore.Data.isDataComponent(child) ? _react.default.cloneElement(child, {groupComponent}) : child);
      }
      modifyPolarDomain(domain, originalDomain) {
        return {x:originalDomain.x, y:[0, domain.y[1]]};
      }
      downsampleZoomData(props, child, domain) {
        var {downsample} = props, data = (childProps => {
          const {data, x, y} = childProps, defaultGetData = child.type && _victoryCore.Helpers.isFunction(child.type.getData) ? child.type.getData : () => {
          };
          return !Array.isArray(data) || x || y ? defaultGetData(childProps) : data;
        })(child.props);
        if (downsample && domain && data) {
          downsample = !0 === downsample ? 150 : downsample;
          var dimension = props.zoomDimension || "x";
          props = data.findIndex(d => d[dimension] >= domain[dimension][0]);
          var endIndex = data.findIndex(d => d[dimension] > domain[dimension][1]);
          0 !== props && --props;
          -1 !== endIndex && (endIndex += 1);
          data = data.slice(props, endIndex);
          return _victoryCore.Data.downsample(data, downsample, props);
        }
      }
      modifyChildren(props) {
        return _react.default.Children.toArray(props.children).map(child => {
          var role = child.type && child.type.role;
          const isDataComponent = _victoryCore.Data.isDataComponent(child), {currentDomain, zoomActive, allowZoom} = props;
          var originalDomain = (0,_defaults2.default)({}, props.originalDomain, props.domain);
          const zoomDomain = (0,_defaults2.default)({}, props.zoomDomain, props.domain);
          var cachedZoomDomain = (0,_defaults2.default)({}, props.cachedZoomDomain, props.domain);
          cachedZoomDomain = _zoomHelpers.ZoomHelpers.checkDomainEquality(zoomDomain, cachedZoomDomain) ? allowZoom && !zoomActive ? child.props.domain : (0,_defaults2.default)({}, currentDomain, originalDomain) : zoomDomain;
          (originalDomain = props.polar ? this.modifyPolarDomain(cachedZoomDomain, originalDomain) : cachedZoomDomain) && props.zoomDimension && (originalDomain = {...zoomDomain, [props.zoomDimension]:originalDomain[props.zoomDimension]});
          role = isDataComponent && "stack" !== role ? {domain:originalDomain, data:this.downsampleZoomData(props, child, originalDomain)} : {domain:originalDomain};
          return _react.default.cloneElement(child, (0,_defaults2.default)(role, child.props));
        });
      }
      getChildren(props) {
        const children = this.modifyChildren(props);
        return this.clipDataComponents(children, props);
      }
    };
    Base.displayName = Base.$jscomp$static$init$1916664067$0$displayName();
    Base.defaultProps = Base.$jscomp$static$init$1916664067$1$defaultProps();
    return Base;
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.VictoryZoomContainer = void 0;
  exports.zoomContainerMixin = zoomContainerMixin;
  var _defaults2 = _interopRequireDefault(require("module$node_modules$lodash$defaults")), _react = _interopRequireDefault(require("module$node_modules$react$index")), _zoomHelpers = require("module$node_modules$victory_zoom_container$lib$zoom_helpers"), _victoryCore = require("module$node_modules$victory_core$lib$index");
  exports.VictoryZoomContainer = zoomContainerMixin(_victoryCore.VictoryContainer);
};

//# sourceMappingURL=module$node_modules$victory_zoom_container$lib$victory_zoom_container.js.map
