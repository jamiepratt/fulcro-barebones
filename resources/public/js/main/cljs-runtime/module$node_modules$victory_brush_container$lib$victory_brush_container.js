shadow$provide.module$node_modules$victory_brush_container$lib$victory_brush_container = function(global, require, module, exports) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  function brushContainerMixin(Base) {
    Base = class extends Base {
      static $jscomp$static$init$m1707162129$0$displayName() {
        return "VictoryBrushContainer";
      }
      static $jscomp$static$init$m1707162129$1$defaultProps() {
        return {..._victoryCore.VictoryContainer.defaultProps, allowDrag:!0, allowDraw:!0, allowResize:!0, brushComponent:_react.default.createElement(_victoryCore.Rect, null), brushStyle:{stroke:"transparent", fill:"black", fillOpacity:0.1}, handleComponent:_react.default.createElement(_victoryCore.Rect, null), handleStyle:{stroke:"transparent", fill:"transparent"}, handleWidth:8, mouseMoveThreshold:0};
      }
      static defaultEvents(props) {
        return [{target:"parent", eventHandlers:{onMouseDown:(evt, targetProps) => props.disable ? {} : _brushHelpers.BrushHelpers.onMouseDown(evt, targetProps), onTouchStart:(evt, targetProps) => props.disable ? {} : _brushHelpers.BrushHelpers.onMouseDown(evt, targetProps), onGlobalMouseMove:(evt, targetProps) => props.disable || !targetProps.isPanning && !targetProps.isSelecting ? {} : _brushHelpers.BrushHelpers.onGlobalMouseMove(evt, targetProps), onGlobalTouchMove:(evt, targetProps) => props.disable || 
        !targetProps.isPanning && !targetProps.isSelecting ? {} : _brushHelpers.BrushHelpers.onGlobalMouseMove(evt, targetProps), onGlobalMouseUp:(evt, targetProps) => props.disable ? {} : _brushHelpers.BrushHelpers.onGlobalMouseUp(evt, targetProps), onGlobalTouchEnd:(evt, targetProps) => props.disable ? {} : _brushHelpers.BrushHelpers.onGlobalMouseUp(evt, targetProps), onGlobalTouchCancel:(evt, targetProps) => props.disable ? {} : _brushHelpers.BrushHelpers.onGlobalMouseUp(evt, targetProps)}}];
      }
      getSelectBox(props, coordinates) {
        const {x, y} = coordinates, {brushStyle, brushComponent, name} = props;
        coordinates = brushComponent.props && brushComponent.props.style;
        props = props.allowDrag || props.allowResize ? "move" : "auto";
        return x[0] !== x[1] && y[0] !== y[1] ? _react.default.cloneElement(brushComponent, {key:`${name}-brush`, width:Math.abs(x[1] - x[0]) || 1, height:Math.abs(y[1] - y[0]) || 1, x:Math.min(x[0], x[1]), y:Math.min(y[0], y[1]), cursor:props, style:(0,_defaults2.default)({}, coordinates, brushStyle)}) : null;
      }
      getCursorPointers(props) {
        const cursors = {yProps:"ns-resize", xProps:"ew-resize"};
        !props.allowResize && props.allowDrag ? (cursors.xProps = "move", cursors.yProps = "move") : props.allowResize || props.allowDrag || (cursors.xProps = "auto", cursors.yProps = "auto");
        return cursors;
      }
      getHandles(props, domain) {
        const {handleWidth, handleStyle, handleComponent, name} = props;
        domain = _brushHelpers.BrushHelpers.getDomainBox(props, domain);
        const {x1, x2, y1, y2} = domain, {top, bottom, left, right} = _brushHelpers.BrushHelpers.getHandles(props, domain);
        var width = Math.abs(x2 - x1) || 1;
        domain = Math.abs(y2 - y1) || 1;
        const style = (0,_defaults2.default)({}, handleComponent.props && handleComponent.props.style || {}, handleStyle);
        props = this.getCursorPointers(props);
        width = {style, width, height:handleWidth, cursor:props.yProps};
        props = {style, width:handleWidth, height:domain, cursor:props.xProps};
        const handleProps = {top:top && Object.assign({x:top.x1, y:top.y1}, width), bottom:bottom && Object.assign({x:bottom.x1, y:bottom.y1}, width), left:left && Object.assign({y:left.y1, x:left.x1}, props), right:right && Object.assign({y:right.y1, x:right.x1}, props)};
        props = ["top", "bottom", "left", "right"].reduce((memo, curr) => handleProps[curr] ? memo.concat(_react.default.cloneElement(handleComponent, Object.assign({key:`${name}-handle-${curr}`}, handleProps[curr]))) : memo, []);
        return props.length ? props : null;
      }
      getRect(props) {
        const {currentDomain, cachedBrushDomain} = props;
        var brushDomain = (0,_defaults2.default)({}, props.brushDomain, props.domain);
        brushDomain = (0,_reactFastCompare.default)(brushDomain, cachedBrushDomain) ? (0,_defaults2.default)({}, currentDomain, brushDomain) : brushDomain;
        var coordinates = _victoryCore.Selection.getDomainCoordinates(props, brushDomain);
        return (coordinates = this.getSelectBox(props, coordinates)) ? [coordinates, this.getHandles(props, brushDomain)] : [];
      }
      getChildren(props) {
        return [..._react.default.Children.toArray(props.children), ...this.getRect(props)];
      }
    };
    Base.displayName = Base.$jscomp$static$init$m1707162129$0$displayName();
    Base.defaultProps = Base.$jscomp$static$init$m1707162129$1$defaultProps();
    return Base;
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.VictoryBrushContainer = void 0;
  exports.brushContainerMixin = brushContainerMixin;
  var _defaults2 = _interopRequireDefault(require("module$node_modules$lodash$defaults")), _react = _interopRequireDefault(require("module$node_modules$react$index")), _victoryCore = require("module$node_modules$victory_core$lib$index"), _brushHelpers = require("module$node_modules$victory_brush_container$lib$brush_helpers"), _reactFastCompare = _interopRequireDefault(require("module$node_modules$react_fast_compare$index"));
  exports.VictoryBrushContainer = brushContainerMixin(_victoryCore.VictoryContainer);
};

//# sourceMappingURL=module$node_modules$victory_brush_container$lib$victory_brush_container.js.map
