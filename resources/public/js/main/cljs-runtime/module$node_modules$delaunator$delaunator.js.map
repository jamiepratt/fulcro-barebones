{
"version":3,
"file":"module$node_modules$delaunator$delaunator.js",
"lineCount":297,
"mappings":"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",
"sources":["node_modules/delaunator/delaunator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$delaunator$delaunator\"] = function(global,require,module,exports) {\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = global || self, global.Delaunator = factory());\n}(this, function () { 'use strict';\n\n    var EPSILON = Math.pow(2, -52);\n    var EDGE_STACK = new Uint32Array(512);\n\n    var Delaunator = function Delaunator(coords) {\n        var n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') { throw new Error('Expected coords to contain numbers.'); }\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        var maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    };\n\n    Delaunator.from = function from (points, getX, getY) {\n            if ( getX === void 0 ) getX = defaultGetX;\n            if ( getY === void 0 ) getY = defaultGetY;\n\n        var n = points.length;\n        var coords = new Float64Array(n * 2);\n\n        for (var i = 0; i < n; i++) {\n            var p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    };\n\n    Delaunator.prototype.update = function update () {\n        var ref =  this;\n            var coords = ref.coords;\n            var hullPrev = ref._hullPrev;\n            var hullNext = ref._hullNext;\n            var hullTri = ref._hullTri;\n            var hullHash = ref._hullHash;\n        var n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        var minX = Infinity;\n        var minY = Infinity;\n        var maxX = -Infinity;\n        var maxY = -Infinity;\n\n        for (var i = 0; i < n; i++) {\n            var x = coords[2 * i];\n            var y = coords[2 * i + 1];\n            if (x < minX) { minX = x; }\n            if (y < minY) { minY = y; }\n            if (x > maxX) { maxX = x; }\n            if (y > maxY) { maxY = y; }\n            this._ids[i] = i;\n        }\n        var cx = (minX + maxX) / 2;\n        var cy = (minY + maxY) / 2;\n\n        var minDist = Infinity;\n        var i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (var i$1 = 0; i$1 < n; i$1++) {\n            var d = dist(cx, cy, coords[2 * i$1], coords[2 * i$1 + 1]);\n            if (d < minDist) {\n                i0 = i$1;\n                minDist = d;\n            }\n        }\n        var i0x = coords[2 * i0];\n        var i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (var i$2 = 0; i$2 < n; i$2++) {\n            if (i$2 === i0) { continue; }\n            var d$1 = dist(i0x, i0y, coords[2 * i$2], coords[2 * i$2 + 1]);\n            if (d$1 < minDist && d$1 > 0) {\n                i1 = i$2;\n                minDist = d$1;\n            }\n        }\n        var i1x = coords[2 * i1];\n        var i1y = coords[2 * i1 + 1];\n\n        var minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (var i$3 = 0; i$3 < n; i$3++) {\n            if (i$3 === i0 || i$3 === i1) { continue; }\n            var r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i$3], coords[2 * i$3 + 1]);\n            if (r < minRadius) {\n                i2 = i$3;\n                minRadius = r;\n            }\n        }\n        var i2x = coords[2 * i2];\n        var i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (var i$4 = 0; i$4 < n; i$4++) {\n                this._dists[i$4] = (coords[2 * i$4] - coords[0]) || (coords[2 * i$4 + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            var hull = new Uint32Array(n);\n            var j = 0;\n            for (var i$5 = 0, d0 = -Infinity; i$5 < n; i$5++) {\n                var id = this._ids[i$5];\n                if (this._dists[id] > d0) {\n                    hull[j++] = id;\n                    d0 = this._dists[id];\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n            var i$6 = i1;\n            var x$1 = i1x;\n            var y$1 = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i$6;\n            i2x = x$1;\n            i2y = y$1;\n        }\n\n        var center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (var i$7 = 0; i$7 < n; i$7++) {\n            this._dists[i$7] = dist(coords[2 * i$7], coords[2 * i$7 + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        var hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (var k = 0, xp = (void 0), yp = (void 0); k < this._ids.length; k++) {\n            var i$8 = this._ids[k];\n            var x$2 = coords[2 * i$8];\n            var y$2 = coords[2 * i$8 + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x$2 - xp) <= EPSILON && Math.abs(y$2 - yp) <= EPSILON) { continue; }\n            xp = x$2;\n            yp = y$2;\n\n            // skip seed triangle points\n            if (i$8 === i0 || i$8 === i1 || i$8 === i2) { continue; }\n\n            // find a visible edge on the convex hull using edge hash\n            var start = 0;\n            for (var j$1 = 0, key = this._hashKey(x$2, y$2); j$1 < this._hashSize; j$1++) {\n                start = hullHash[(key + j$1) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) { break; }\n            }\n\n            start = hullPrev[start];\n            var e = start, q = (void 0);\n            while (q = hullNext[e], !orient(x$2, y$2, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) { continue; } // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            var t = this._addTriangle(e, i$8, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i$8] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            var n$1 = hullNext[e];\n            while (q = hullNext[n$1], orient(x$2, y$2, coords[2 * n$1], coords[2 * n$1 + 1], coords[2 * q], coords[2 * q + 1])) {\n                t = this._addTriangle(n$1, i$8, q, hullTri[i$8], -1, hullTri[n$1]);\n                hullTri[i$8] = this._legalize(t + 2);\n                hullNext[n$1] = n$1; // mark as removed\n                hullSize--;\n                n$1 = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient(x$2, y$2, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n                    t = this._addTriangle(q, i$8, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i$8] = e;\n            hullNext[e] = hullPrev[n$1] = i$8;\n            hullNext[i$8] = n$1;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x$2, y$2)] = i$8;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (var i$9 = 0, e$1 = this._hullStart; i$9 < hullSize; i$9++) {\n            this.hull[i$9] = e$1;\n            e$1 = hullNext[e$1];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    };\n\n    Delaunator.prototype._hashKey = function _hashKey (x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    };\n\n    Delaunator.prototype._legalize = function _legalize (a) {\n        var ref = this;\n            var triangles = ref._triangles;\n            var halfedges = ref._halfedges;\n            var coords = ref.coords;\n\n        var i = 0;\n        var ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            var b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *       pl                pl\n             *      /||\\              /  \\\n             *   al/ || \\bl        al/\\a\n             *    /  ||  \\          /  \\\n             *   /  a||b  \\flip/___ar___\\\n             * p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *    \\  ||  /          \\  /\n             *   ar\\ || /br         b\\/br\n             *      \\||/              \\  /\n             *       pr                pr\n             */\n            var a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) { break; }\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            var b0 = b - b % 3;\n            var al = a0 + (a + 1) % 3;\n            var bl = b0 + (b + 2) % 3;\n\n            var p0 = triangles[ar];\n            var pr = triangles[a];\n            var pl = triangles[al];\n            var p1 = triangles[bl];\n\n            var illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                var hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    var e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                var br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) { break; }\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    };\n\n    Delaunator.prototype._link = function _link (a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) { this._halfedges[b] = a; }\n    };\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    Delaunator.prototype._addTriangle = function _addTriangle (i0, i1, i2, a, b, c) {\n        var t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    };\n\n    // monotonically increases with real angle, but doesn't need expensive trigonometry\n    function pseudoAngle(dx, dy) {\n        var p = dx / (Math.abs(dx) + Math.abs(dy));\n        return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n    }\n\n    function dist(ax, ay, bx, by) {\n        var dx = ax - bx;\n        var dy = ay - by;\n        return dx * dx + dy * dy;\n    }\n\n    // return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check\n    function orientIfSure(px, py, rx, ry, qx, qy) {\n        var l = (ry - py) * (qx - px);\n        var r = (rx - px) * (qy - py);\n        return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;\n    }\n\n    // a more robust orientation test that's stable in a given triangle (to fix robustness issues)\n    function orient(rx, ry, qx, qy, px, py) {\n        var sign = orientIfSure(px, py, rx, ry, qx, qy) ||\n        orientIfSure(rx, ry, qx, qy, px, py) ||\n        orientIfSure(qx, qy, px, py, rx, ry);\n        return sign < 0;\n    }\n\n    function inCircle(ax, ay, bx, by, cx, cy, px, py) {\n        var dx = ax - px;\n        var dy = ay - py;\n        var ex = bx - px;\n        var ey = by - py;\n        var fx = cx - px;\n        var fy = cy - py;\n\n        var ap = dx * dx + dy * dy;\n        var bp = ex * ex + ey * ey;\n        var cp = fx * fx + fy * fy;\n\n        return dx * (ey * cp - bp * fy) -\n               dy * (ex * cp - bp * fx) +\n               ap * (ex * fy - ey * fx) < 0;\n    }\n\n    function circumradius(ax, ay, bx, by, cx, cy) {\n        var dx = bx - ax;\n        var dy = by - ay;\n        var ex = cx - ax;\n        var ey = cy - ay;\n\n        var bl = dx * dx + dy * dy;\n        var cl = ex * ex + ey * ey;\n        var d = 0.5 / (dx * ey - dy * ex);\n\n        var x = (ey * bl - dy * cl) * d;\n        var y = (dx * cl - ex * bl) * d;\n\n        return x * x + y * y;\n    }\n\n    function circumcenter(ax, ay, bx, by, cx, cy) {\n        var dx = bx - ax;\n        var dy = by - ay;\n        var ex = cx - ax;\n        var ey = cy - ay;\n\n        var bl = dx * dx + dy * dy;\n        var cl = ex * ex + ey * ey;\n        var d = 0.5 / (dx * ey - dy * ex);\n\n        var x = ax + (ey * bl - dy * cl) * d;\n        var y = ay + (dx * cl - ex * bl) * d;\n\n        return {x: x, y: y};\n    }\n\n    function quicksort(ids, dists, left, right) {\n        if (right - left <= 20) {\n            for (var i = left + 1; i <= right; i++) {\n                var temp = ids[i];\n                var tempDist = dists[temp];\n                var j = i - 1;\n                while (j >= left && dists[ids[j]] > tempDist) { ids[j + 1] = ids[j--]; }\n                ids[j + 1] = temp;\n            }\n        } else {\n            var median = (left + right) >> 1;\n            var i$1 = left + 1;\n            var j$1 = right;\n            swap(ids, median, i$1);\n            if (dists[ids[left]] > dists[ids[right]]) { swap(ids, left, right); }\n            if (dists[ids[i$1]] > dists[ids[right]]) { swap(ids, i$1, right); }\n            if (dists[ids[left]] > dists[ids[i$1]]) { swap(ids, left, i$1); }\n\n            var temp$1 = ids[i$1];\n            var tempDist$1 = dists[temp$1];\n            while (true) {\n                do { i$1++; } while (dists[ids[i$1]] < tempDist$1);\n                do { j$1--; } while (dists[ids[j$1]] > tempDist$1);\n                if (j$1 < i$1) { break; }\n                swap(ids, i$1, j$1);\n            }\n            ids[left + 1] = ids[j$1];\n            ids[j$1] = temp$1;\n\n            if (right - i$1 + 1 >= j$1 - left) {\n                quicksort(ids, dists, i$1, right);\n                quicksort(ids, dists, left, j$1 - 1);\n            } else {\n                quicksort(ids, dists, left, j$1 - 1);\n                quicksort(ids, dists, i$1, right);\n            }\n        }\n    }\n\n    function swap(arr, i, j) {\n        var tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n    }\n\n    function defaultGetX(p) {\n        return p[0];\n    }\n    function defaultGetY(p) {\n        return p[1];\n    }\n\n    return Delaunator;\n\n}));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","self","Delaunator","dist","ax","ay","bx","by","dx","dy","orientIfSure","px","py","rx","ry","qx","qy","l","r","Math","abs","orient","quicksort","ids","dists","left","right","i","temp","tempDist","j","i$1","j$1","swap","temp$1","tempDist$1","arr","tmp","defaultGetX","p","defaultGetY","EPSILON","pow","EDGE_STACK","Uint32Array","coords","n","length","Error","maxTriangles","max","_triangles","_halfedges","Int32Array","_hashSize","ceil","sqrt","_hullPrev","_hullNext","_hullTri","_hullHash","fill","_ids","_dists","Float64Array","update","from","Delaunator.from","points","getX","getY","prototype","Delaunator.prototype.update","ref","hullPrev","hullNext","hullTri","hullHash","minX","Infinity","minY","maxX","maxY","x","y","cx","cy","minDist","d","i0","i0x","i0y","i$2","d$1","i1","i1x","i1y","minRadius","i$3","ex","ey","bl","cl","i2","i2x","i2y","i$4","hull","i$5","d0","id","subarray","triangles","halfedges","i$6","x$1","y$1","_cx","_cy","i$7","_hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","k","yp","xp","i$8","x$2","y$2","start","key","e","q","t","_legalize","n$1","i$9","e$1","Delaunator.prototype._hashKey","floor","Delaunator.prototype._legalize","a","ar","b","a0","b0","p0","pr","pl","p1","fx","fy","bp","cp","hbl","_link","br","Delaunator.prototype._link","Delaunator.prototype._addTriangle","c"]
}
