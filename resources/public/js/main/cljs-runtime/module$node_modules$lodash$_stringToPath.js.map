{
"version":3,
"file":"module$node_modules$lodash$_stringToPath.js",
"lineCount":13,
"mappings":"AAAAA,cAAA,CAAA,wCAAA,GAA6D,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAIrG,MAAIC,aAAa,kGAAjB,EAGIC,eAAe,UAHnB;AAYIC,QAAAA,GAfgBL,OAAAM,CAAQ,2CAARA,CAeD,CAAc,QAAQ,CAACC,MAAD,CAAS;AAChD,QAAIC,SAAS,EAAb;AAC6B,MAA7B,KAAID,MAAOE,CAAAA,UAAP,CAAkB,CAAlB,CAAJ,IACED,MAAOE,CAAAA,IAAP,CAAY,EAAZ,CADF;AAGAH,UAAOI,CAAAA,OAAP,CAAeR,UAAf,EAA2B,QAAQ,CAACS,KAAD,EAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,SAAvB,CAAkC;AACnEP,YAAOE,CAAAA,IAAP,CAAYI,KAAA,GAAQC,SAAUJ,CAAAA,OAAV,CAAkBP,YAAlB,EAAgC,IAAhC,CAAR,GAAiDS,MAAjD,IAA2DD,KAAvE,CAAA;AADmE,KAArE,CAAA;AAGA,WAAOJ,MAAP;AARgD,GAA/B,CAAfH;AAWJJ,QAAOC,CAAAA,OAAP,GAAiBG,MAAjB;AA3BqG,CAArG;;",
"sources":["node_modules/lodash/_stringToPath.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_stringToPath\"] = function(global,require,module,exports) {\nvar memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n\n};"],
"names":["shadow$provide","global","require","module","exports","rePropName","reEscapeChar","stringToPath","memoizeCapped","string","result","charCodeAt","push","replace","match","number","quote","subString"]
}
