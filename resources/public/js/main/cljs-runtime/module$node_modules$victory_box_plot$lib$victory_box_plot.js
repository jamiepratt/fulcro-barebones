shadow$provide.module$node_modules$victory_box_plot$lib$victory_box_plot = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.VictoryBoxPlot = void 0;
  var _react = function(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }(require("module$node_modules$react$index")), _victoryCore = require("module$node_modules$victory_core$lib$index"), _helperMethods = require("module$node_modules$victory_box_plot$lib$helper_methods");
  const fallbackProps = {width:450, height:300, padding:{top:20, right:20, bottom:20, left:20}}, defaultData = [{x:1, min:5, q1:7, median:12, q3:18, max:20}, {x:2, min:2, q1:5, median:8, q3:12, max:15}];
  class VictoryBoxPlotBase extends _react.default.Component {
    static $jscomp$static$init$393544131$0$animationWhitelist() {
      return "data domain height padding style width".split(" ");
    }
    static $jscomp$static$init$393544131$1$displayName() {
      return "VictoryBoxPlot";
    }
    static $jscomp$static$init$393544131$2$role() {
      return "boxplot";
    }
    static $jscomp$static$init$393544131$3$defaultTransitions() {
      return _victoryCore.DefaultTransitions.discreteTransitions();
    }
    static $jscomp$static$init$393544131$4$defaultProps() {
      return {containerComponent:_react.default.createElement(_victoryCore.VictoryContainer, null), data:defaultData, dataComponent:_react.default.createElement(_victoryCore.Box, null), groupComponent:_react.default.createElement("g", {role:"presentation"}), maxComponent:_react.default.createElement(_victoryCore.Whisker, null), maxLabelComponent:_react.default.createElement(_victoryCore.VictoryLabel, null), medianComponent:_react.default.createElement(_victoryCore.LineSegment, null), medianLabelComponent:_react.default.createElement(_victoryCore.VictoryLabel, 
      null), minComponent:_react.default.createElement(_victoryCore.Whisker, null), minLabelComponent:_react.default.createElement(_victoryCore.VictoryLabel, null), q1Component:_react.default.createElement(_victoryCore.Box, null), q1LabelComponent:_react.default.createElement(_victoryCore.VictoryLabel, null), q3Component:_react.default.createElement(_victoryCore.Box, null), q3LabelComponent:_react.default.createElement(_victoryCore.VictoryLabel, null), samples:50, sortKey:"x", sortOrder:"ascending", 
      standalone:!0, theme:_victoryCore.VictoryTheme.grayscale};
    }
    static getDomain(props, axis) {
      return (0,_helperMethods.getDomain)(props, axis);
    }
    static getData(props) {
      return (0,_helperMethods.getData)(props);
    }
    static getBaseProps(props) {
      return (0,_helperMethods.getBaseProps)(props, fallbackProps);
    }
    static $jscomp$static$init$393544131$5$expectedComponents() {
      return "maxComponent maxLabelComponent medianComponent medianLabelComponent minComponent minLabelComponent q1Component q1LabelComponent q3Component q3LabelComponent groupComponent containerComponent".split(" ");
    }
    renderBoxPlot(props) {
      var types = ["q1", "q3", "max", "min", "median"], dataComponents = types.map(type => this.dataKeys.reduce((validDataComponents, _key, index) => {
        _key = props[`${type}Component`];
        index = this.getComponentProps(_key, type, index);
        this.shouldRenderDatum(index.datum) && validDataComponents.push(_react.default.cloneElement(_key, index));
        return validDataComponents;
      }, [])).flat();
      types = types.map(type => this.dataKeys.reduce((validComponents, _key, index) => {
        _key = props[`${type}LabelComponent`];
        index = this.getComponentProps(_key, `${type}Labels`, index);
        void 0 !== index.text && null !== index.text && validComponents.push(_react.default.cloneElement(_key, index));
        return validComponents;
      }, []).filter(Boolean)).flat();
      dataComponents = [...dataComponents, ...types];
      return this.renderContainer(props.groupComponent, dataComponents);
    }
    shouldAnimate() {
      return !!this.props.animate;
    }
    shouldRenderDatum(datum) {
      const hasX = !_victoryCore.Helpers.isNil(datum._x), hasY = !_victoryCore.Helpers.isNil(datum._y);
      return !_victoryCore.Helpers.isNil(datum._min) && !_victoryCore.Helpers.isNil(datum._max) && !_victoryCore.Helpers.isNil(datum._median) && !_victoryCore.Helpers.isNil(datum._q1) && !_victoryCore.Helpers.isNil(datum._q3) && (this.props.horizontal ? hasY : hasX);
    }
    render() {
      const {animationWhitelist, role} = VictoryBoxPlot, props = _victoryCore.Helpers.modifyProps(this.props, fallbackProps, role);
      if (this.shouldAnimate()) {
        return this.animateComponent(props, animationWhitelist);
      }
      var children = this.renderBoxPlot(props);
      children = props.standalone ? this.renderContainer(props.containerComponent, children) : children;
      return _victoryCore.UserProps.withSafeUserProps(children, props);
    }
  }
  VictoryBoxPlotBase.animationWhitelist = VictoryBoxPlotBase.$jscomp$static$init$393544131$0$animationWhitelist();
  VictoryBoxPlotBase.displayName = VictoryBoxPlotBase.$jscomp$static$init$393544131$1$displayName();
  VictoryBoxPlotBase.role = VictoryBoxPlotBase.$jscomp$static$init$393544131$2$role();
  VictoryBoxPlotBase.defaultTransitions = VictoryBoxPlotBase.$jscomp$static$init$393544131$3$defaultTransitions();
  VictoryBoxPlotBase.defaultProps = VictoryBoxPlotBase.$jscomp$static$init$393544131$4$defaultProps();
  VictoryBoxPlotBase.expectedComponents = VictoryBoxPlotBase.$jscomp$static$init$393544131$5$expectedComponents();
  const VictoryBoxPlot = exports.VictoryBoxPlot = (0,_victoryCore.addEvents)(VictoryBoxPlotBase, {components:[{name:"min"}, {name:"minLabels"}, {name:"max"}, {name:"maxLabels"}, {name:"median"}, {name:"medianLabels"}, {name:"q1"}, {name:"q1Labels"}, {name:"q3"}, {name:"q3Labels"}, {name:"parent", index:"parent"}]});
};

//# sourceMappingURL=module$node_modules$victory_box_plot$lib$victory_box_plot.js.map
