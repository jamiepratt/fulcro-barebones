shadow$provide.module$node_modules$victory_bar$lib$helper_methods = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.getBaseProps = exports.getBarPosition = void 0;
  var _victoryCore = require("module$node_modules$victory_core$lib$index");
  const getBarPosition = (props, datum) => {
    var getDefaultMin = axis => {
      let defaultMin = "log" === _victoryCore.Scale.getType(props.scale[axis]) ? 1 / Number.MAX_SAFE_INTEGER : 0;
      const minY = _victoryCore.Collection.getMinValue(props.domain[axis]), maxY = _victoryCore.Collection.getMaxValue(props.domain[axis]);
      0 > minY && 0 >= maxY ? defaultMin = maxY : 0 <= minY && 0 < maxY && (defaultMin = minY);
      return datum[`_${axis}`] instanceof Date ? new Date(defaultMin) : defaultMin;
    };
    const _y0 = void 0 !== datum._y0 ? datum._y0 : getDefaultMin("y");
    getDefaultMin = void 0 !== datum._x0 ? datum._x0 : getDefaultMin("x");
    return _victoryCore.Helpers.scalePoint(props, Object.assign({}, datum, {_y0, _x0:getDefaultMin}));
  };
  exports.getBarPosition = getBarPosition;
  const getCalculatedValues = props => {
    var {polar} = props, defaultStyles = _victoryCore.Helpers.getDefaultStyles(props, "bar");
    defaultStyles = props.disableInlineStyles ? {} : _victoryCore.Helpers.getStyles(props.style, defaultStyles);
    var range = props.range || {x:_victoryCore.Helpers.getRange(props, "x"), y:_victoryCore.Helpers.getRange(props, "y")};
    const domain = {x:_victoryCore.Domain.getDomainWithZero(props, "x"), y:_victoryCore.Domain.getDomainWithZero(props, "y")};
    range = {x:_victoryCore.Scale.getBaseScale(props, "x").domain(domain.x).range(props.horizontal ? range.y : range.x), y:_victoryCore.Scale.getBaseScale(props, "y").domain(domain.y).range(props.horizontal ? range.x : range.y)};
    polar = polar ? props.origin || _victoryCore.Helpers.getPolarOrigin(props) : void 0;
    props = _victoryCore.Data.getData(props);
    props = _victoryCore.Data.formatDataFromDomain(props, domain, 0);
    return {style:defaultStyles, data:props, scale:range, domain, origin:polar};
  };
  exports.getBaseProps = (initialProps, fallbackProps) => {
    initialProps = _victoryCore.Helpers.modifyProps(initialProps, fallbackProps, "bar");
    const props = Object.assign({}, initialProps, getCalculatedValues(initialProps)), {alignment, barRatio, cornerRadius, data, disableInlineStyles, domain, events, height, horizontal, origin, padding, polar, scale, sharedEvents, standalone, style, theme, width, labels, name, barWidth, getPath} = props;
    return data.reduce((childProps, datum, index) => {
      const eventKey = _victoryCore.Helpers.isNil(datum.eventKey) ? index : datum.eventKey, {x, y, y0, x0} = getBarPosition(props, datum);
      childProps[eventKey] = {data:{alignment, barRatio, barWidth, cornerRadius, data, datum, disableInlineStyles, getPath, horizontal, index, polar, origin, scale, style:style.data, width, height, x, y, y0, x0}};
      datum = _victoryCore.LabelHelpers.getText(props, datum, index);
      if (void 0 !== datum && null !== datum || labels && (events || sharedEvents)) {
        childProps[eventKey].labels = _victoryCore.LabelHelpers.getProps(props, index);
      }
      return childProps;
    }, {parent:{horizontal, domain, scale, width, height, data, standalone, name, theme, polar, origin, padding, style:style.parent}});
  };
};

//# sourceMappingURL=module$node_modules$victory_bar$lib$helper_methods.js.map
