{
"version":3,
"file":"module$node_modules$victory_vendor$lib_vendor$d3_array$src$mode.js",
"lineCount":24,
"mappings":"AAAAA,cAAA,CAAA,+DAAA,GAAoF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG5HC,QAAOC,CAAAA,cAAP,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAH,SAAQI,CAAAA,OAAR,GAEAC,QAAa,CAACC,MAAD,EAASC,OAAT,CAAkB;AAC7B,UAAMC,SAAS,IAAIC,MAAOC,CAAAA,SAAX,EAAf;AACA,QAAgBC,IAAAA,EAAhB,KAAIJ,OAAJ;AACE,WAAK,IAAIJ,cAAT,IAAkBG,MAAlB;AACe,YAAb,IAAIH,cAAJ,IAAqBA,cAArB,IAA8BA,cAA9B,IACEK,MAAOI,CAAAA,GAAP,CAAWT,cAAX,GAAmBK,MAAOK,CAAAA,GAAP,CAAWV,cAAX,CAAnB,IAAwC,CAAxC,IAA6C,CAA7C,CADF;AADF;AADF,UAMO;AACDW,oBAAAA,GAAQ,CAAC,CAATA;AACJ,WAAK,IAAIX,KAAT,IAAkBG,MAAlB;AACmD,YAAjD,KAAKH,KAAL,GAAaI,OAAA,CAAQJ,KAAR,EAAe,EAAEW,cAAjB,EAAwBR,MAAxB,CAAb,KAAyDH,KAAzD,IAAkEA,KAAlE,IACEK,MAAOI,CAAAA,GAAP,CAAWT,KAAX,GAAmBK,MAAOK,CAAAA,GAAP,CAAWV,KAAX,CAAnB,IAAwC,CAAxC,IAA6C,CAA7C,CADF;AADF;AAFK;AAQP,QAAIY,SAAJ;AACIC,UAAAA,GAAY,CAAZA;AACJ,SAAK,MAAM,CAACb,KAAD,EAAQc,KAAR,CAAX,IAA6BT,MAA7B;AACMS,WAAJ,GAAYD,MAAZ,KACEA,MACA,GADYC,KACZ,EAAAF,SAAA,GAAYZ,KAFd;AADF;AAMA,WAAOY,SAAP;AAxB6B,GAF/B;AACA,MAAIN,SAASX,OAAA,CAAQ,mEAAR,CAAb;AAP4H,CAA5H;;",
"sources":["node_modules/victory-vendor/lib-vendor/d3-array/src/mode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$victory_vendor$lib_vendor$d3_array$src$mode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mode;\nvar _index = require(\"../../../lib-vendor/internmap/src/index.js\");\nfunction mode(values, valueof) {\n  const counts = new _index.InternMap();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && value >= value) {\n        counts.set(value, (counts.get(value) || 0) + 1);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && value >= value) {\n        counts.set(value, (counts.get(value) || 0) + 1);\n      }\n    }\n  }\n  let modeValue;\n  let modeCount = 0;\n  for (const [value, count] of counts) {\n    if (count > modeCount) {\n      modeCount = count;\n      modeValue = value;\n    }\n  }\n  return modeValue;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","mode","values","valueof","counts","_index","InternMap","undefined","set","get","index","modeValue","modeCount","count"]
}
