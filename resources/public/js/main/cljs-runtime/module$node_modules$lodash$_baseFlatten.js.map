{
"version":3,
"file":"module$node_modules$lodash$_baseFlatten.js",
"lineCount":14,
"mappings":"AAAAA,cAAA,CAAA,uCAAA,GAA4D,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAepGC,UAASA,YAAW,CAACC,KAAD,EAAQC,KAAR,EAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,MAApC,CAA4C;AAAA,QAC1DC,QAAQ,CAAC,CADiD,EAE1DC,SAASN,KAAMM,CAAAA,MAF2C;AAI9DJ,aAAA,KAAcA,SAAd,GAA0BK,aAA1B;AAGA,SAFAH,MAEA,KAFWA,MAEX,GAFoB,EAEpB,GAAO,EAAEC,KAAT,GAAiBC,MAAjB,CAAA,CAAyB;AACvB,UAAIE,QAAQR,KAAA,CAAMK,KAAN,CAAZ;AACY,OAAZ,GAAIJ,KAAJ,IAAiBC,SAAA,CAAUM,KAAV,CAAjB,GACc,CAAZ,GAAIP,KAAJ,GAEEF,WAAA,CAAYS,KAAZ,EAAmBP,KAAnB,GAA2B,CAA3B,EAA8BC,SAA9B,EAAyCC,QAAzC,EAAmDC,MAAnD,CAFF,GAIEK,SAAA,CAAUL,MAAV,EAAkBI,KAAlB,CALJ,GAOYL,QAPZ,KAQEC,MAAA,CAAOA,MAAOE,CAAAA,MAAd,CARF,GAQ0BE,KAR1B,CAAA;AAFuB;AAazB,WAAOJ,MAAP;AApB8D;AAfoC,MAChGK,YAAYb,OAAA,CAAQ,uCAAR,CADoF,EAEhGW,gBAAgBX,OAAA,CAAQ,2CAAR,CAFgF;AAsCpGC,QAAOC,CAAAA,OAAP,GAAiBC,WAAjB;AAtCoG,CAApG;;",
"sources":["node_modules/lodash/_baseFlatten.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_baseFlatten\"] = function(global,require,module,exports) {\nvar arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n\n};"],
"names":["shadow$provide","global","require","module","exports","baseFlatten","array","depth","predicate","isStrict","result","index","length","isFlattenable","value","arrayPush"]
}
