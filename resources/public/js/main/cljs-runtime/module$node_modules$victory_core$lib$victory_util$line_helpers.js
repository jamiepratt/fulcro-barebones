shadow$provide.module$node_modules$victory_core$lib$victory_util$line_helpers = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.getLineFunction = exports.getInterpolationFunction = void 0;
  var d3Shape = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$victory_vendor$lib$d3_shape"));
  const defined = d => {
    const y = void 0 !== d._y1 ? d._y1 : d._y;
    return null !== y && void 0 !== y && null !== d._y0;
  }, getXAccessor = scale => d => scale.x(void 0 !== d._x1 ? d._x1 : d._x), getYAccessor = scale => d => scale.y(void 0 !== d._y1 ? d._y1 : d._y), getAngleAccessor = scale => d => -1 * scale.x(void 0 !== d._x1 ? d._x1 : d._x) + Math.PI / 2, getInterpolationFunction = props => {
    const {interpolation} = props;
    if ("function" === typeof interpolation) {
      return interpolation;
    }
    if ("string" === typeof interpolation) {
      const {polar, openCurve = !polar} = props;
      props = openCurve ? `curve${interpolation && interpolation[0].toUpperCase() + interpolation.slice(1)}` : `${`curve${interpolation && interpolation[0].toUpperCase() + interpolation.slice(1)}`}Closed`;
      return d3Shape[props];
    }
    return d3Shape.curveLinear;
  };
  exports.getInterpolationFunction = getInterpolationFunction;
  exports.getLineFunction = props => {
    const {polar, scale, horizontal} = props;
    return polar ? d3Shape.lineRadial().defined(defined).curve(getInterpolationFunction(props)).angle(getAngleAccessor(scale)).radius(getYAccessor(scale)) : d3Shape.line().defined(defined).curve(getInterpolationFunction(props)).x(horizontal ? getYAccessor(scale) : getXAccessor(scale)).y(horizontal ? getXAccessor(scale) : getYAccessor(scale));
  };
};

//# sourceMappingURL=module$node_modules$victory_core$lib$victory_util$line_helpers.js.map
