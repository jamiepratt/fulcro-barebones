{
"version":3,
"file":"module$node_modules$lodash$_overRest.js",
"lineCount":18,
"mappings":"AAAAA,cAAA,CAAA,oCAAA,GAAyD,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AACjG,MAAIC,QAAQH,OAAA,CAAQ,mCAAR,CAAZ,EAGII,YAAYC,IAAKC,CAAAA,GAHrB;AAmCAL,QAAOC,CAAAA,OAAP,GArBAK,QAAiB,CAACC,IAAD,EAAOC,KAAP,EAAcC,SAAd,CAAyB;AACxCD,SAAA,GAAQL,SAAA,CAAoBO,IAAAA,EAAV,KAAAF,KAAA,GAAuBD,IAAKI,CAAAA,MAA5B,GAAqC,CAArC,GAA0CH,KAApD,EAA2D,CAA3D,CAAR;AACA,WAAO,QAAQ,EAAG;AAMhB,WANgB,IACZI,OAAOC,SADK,EAEZC,QAAQ,CAAC,CAFG,EAGZH,SAASR,SAAA,CAAUS,IAAKD,CAAAA,MAAf,GAAwBH,KAAxB,EAA+B,CAA/B,CAHG,EAIZO,QAAQC,KAAA,CAAML,MAAN,CAEZ,EAAO,EAAEG,KAAT,GAAiBH,MAAjB,CAAA;AACEI,aAAA,CAAMD,KAAN,CAAA,GAAeF,IAAA,CAAKJ,KAAL,GAAaM,KAAb,CAAf;AADF;AAGAA,WAAA,GAAQ,CAAC,CAAT;AAEA,WADIG,MACJ,GADgBD,KAAA,CAAMR,KAAN,GAAc,CAAd,CAChB,EAAO,EAAEM,KAAT,GAAiBN,KAAjB,CAAA;AACES,cAAA,CAAUH,KAAV,CAAA,GAAmBF,IAAA,CAAKE,KAAL,CAAnB;AADF;AAGAG,YAAA,CAAUT,KAAV,CAAA,GAAmBC,SAAA,CAAUM,KAAV,CAAnB;AACA,aAAOb,KAAA,CAAMK,IAAN,EAAY,IAAZ,EAAkBU,MAAlB,CAAP;AAfgB,KAAlB;AAFwC,GAqB1C;AApCiG,CAAjG;;",
"sources":["node_modules/lodash/_overRest.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_overRest\"] = function(global,require,module,exports) {\nvar apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n\n};"],
"names":["shadow$provide","global","require","module","exports","apply","nativeMax","Math","max","overRest","func","start","transform","undefined","length","args","arguments","index","array","Array","otherArgs"]
}
