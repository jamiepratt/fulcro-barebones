{
"version":3,
"file":"module$node_modules$lodash$_equalByTag.js",
"lineCount":49,
"mappings":"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",
"sources":["node_modules/lodash/_equalByTag.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_equalByTag\"] = function(global,require,module,exports) {\nvar Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Symbol","Uint8Array","eq","equalArrays","mapToArray","setToArray","symbolValueOf","symbolProto","prototype","undefined","valueOf","equalByTag","object","other","tag","bitmask","customizer","equalFunc","stack","dataViewTag","byteLength","byteOffset","buffer","arrayBufferTag","boolTag","dateTag","numberTag","errorTag","name","message","regexpTag","stringTag","mapTag","convert","setTag","size","COMPARE_PARTIAL_FLAG","stacked","get","COMPARE_UNORDERED_FLAG","set","result","symbolTag","call"]
}
