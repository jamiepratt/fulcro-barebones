shadow$provide.module$node_modules$victory_selection_container$lib$selection_helpers = function(global, require, module, exports) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.SelectionHelpers = void 0;
  var _throttle2 = _interopRequireDefault(require("module$node_modules$lodash$throttle")), _defaults2 = _interopRequireDefault(require("module$node_modules$lodash$defaults")), _victoryCore = require("module$node_modules$victory_core$lib$index"), _react = _interopRequireDefault(require("module$node_modules$react$index"));
  class SelectionHelpersClass {
    constructor() {
      this.onMouseDown = (evt, targetProps) => {
        evt.preventDefault();
        const {activateSelectedData, allowSelection, polar, selectedData} = targetProps;
        if (!allowSelection) {
          return {};
        }
        var dimension = this.getDimension(targetProps);
        const parentSVG = targetProps.parentSVG || _victoryCore.Selection.getParentSVG(evt), {x, y} = _victoryCore.Selection.getSVGEventCoordinates(evt, parentSVG);
        evt = polar || "y" !== dimension ? x : _victoryCore.Selection.getDomainCoordinates(targetProps).x[0];
        const y1 = polar || "x" !== dimension ? y : _victoryCore.Selection.getDomainCoordinates(targetProps).y[0], x2 = polar || "y" !== dimension ? x : _victoryCore.Selection.getDomainCoordinates(targetProps).x[1];
        dimension = polar || "x" !== dimension ? y : _victoryCore.Selection.getDomainCoordinates(targetProps).y[1];
        const mutatedProps = {x1:evt, y1, select:!0, x2, y2:dimension, parentSVG};
        if (selectedData && _victoryCore.Helpers.isFunction(targetProps.onSelectionCleared)) {
          targetProps.onSelectionCleared((0,_defaults2.default)({}, mutatedProps, targetProps));
        }
        targetProps = selectedData && activateSelectedData ? selectedData.map(d => ({childName:d.childName, eventKey:d.eventKey, target:"data", mutation:() => null})) : [];
        return [{target:"parent", mutation:() => mutatedProps}].concat(...targetProps);
      };
      this.handleMouseMove = (evt, targetProps) => {
        const {allowSelection, select, polar} = targetProps, dimension = this.getDimension(targetProps);
        if (!allowSelection || !select) {
          return null;
        }
        const parentSVG = targetProps.parentSVG || _victoryCore.Selection.getParentSVG(evt), {x, y} = _victoryCore.Selection.getSVGEventCoordinates(evt, parentSVG), x2 = polar || "y" !== dimension ? x : _victoryCore.Selection.getDomainCoordinates(targetProps).x[1], y2 = polar || "x" !== dimension ? y : _victoryCore.Selection.getDomainCoordinates(targetProps).y[1];
        return {target:"parent", mutation:() => ({x2, y2, parentSVG})};
      };
      this.onMouseMove = (0,_throttle2.default)(this.handleMouseMove, 16, {leading:!0, trailing:!1});
      this.onMouseUp = (evt, targetProps) => {
        const {activateSelectedData, allowSelection, x2, y2} = targetProps;
        if (!allowSelection) {
          return null;
        }
        if (!x2 || !y2) {
          return [{target:"parent", mutation:() => ({select:!1, x1:null, x2:null, y1:null, y2:null})}];
        }
        evt = this.getDatasets(targetProps);
        const bounds = _victoryCore.Selection.getBounds(targetProps), selectedData = this.filterDatasets(targetProps, evt), mutatedProps = {selectedData, datasets:evt, select:!1, x1:null, x2:null, y1:null, y2:null}, callbackMutation = selectedData && _victoryCore.Helpers.isFunction(targetProps.onSelection) ? targetProps.onSelection(selectedData, bounds, (0,_defaults2.default)({}, mutatedProps, targetProps)) : {};
        targetProps = selectedData && activateSelectedData ? selectedData.map(d => ({childName:d.childName, eventKey:d.eventKey, target:"data", mutation:() => Object.assign({active:!0}, callbackMutation)})) : [];
        return [{target:"parent", mutation:() => mutatedProps}].concat(targetProps);
      };
    }
    getDimension(props) {
      const {horizontal, selectionDimension} = props;
      return horizontal && selectionDimension ? "x" === selectionDimension ? "y" : "x" : selectionDimension;
    }
    getDatasets(props) {
      return props.data ? [{data:props.data}] : _victoryCore.Helpers.reduceChildren(_react.default.Children.toArray(props.children), (child, childName, parent) => {
        const blacklist = props.selectionBlacklist || [];
        let childElement;
        if (!_victoryCore.Data.isDataComponent(child) || blacklist.includes(childName)) {
          return null;
        }
        if (child.type && _victoryCore.Helpers.isFunction(child.type.getData)) {
          return childElement = parent ? _react.default.cloneElement(child, parent.props) : child, (child = childElement.props && childElement.type.getData(childElement.props)) ? {childName, data:child} : null;
        }
        child = _victoryCore.Data.getData(childElement.props);
        return (child = Array.isArray(child) && 0 < child.length ? child : void 0) ? {childName, data:child} : null;
      }, props);
    }
    filterDatasets(props, datasets) {
      datasets = datasets.reduce((memo, dataset) => {
        const selectedData = this.getSelectedData(props, dataset.data);
        return selectedData ? memo.concat({childName:dataset.childName, eventKey:selectedData.eventKey, data:selectedData.data}) : memo;
      }, []);
      return datasets.length ? datasets : null;
    }
    getSelectedData(props, dataset) {
      const {x1, y1, x2, y2} = props, eventKey = [], data = [];
      let count = 0;
      for (let index = 0, len = dataset.length; index < len; index++) {
        const datum = dataset[index], scaledPoint = _victoryCore.Helpers.scalePoint(props, datum);
        scaledPoint.x >= Math.min(x1, x2) && scaledPoint.x <= Math.max(x1, x2) && scaledPoint.y >= Math.min(y1, y2) && scaledPoint.y <= Math.max(y1, y2) && (data[count] = datum, eventKey[count] = void 0 === datum.eventKey ? index : datum.eventKey, count++);
      }
      return 0 < count ? {eventKey, data} : null;
    }
  }
  exports.SelectionHelpers = new SelectionHelpersClass();
};

//# sourceMappingURL=module$node_modules$victory_selection_container$lib$selection_helpers.js.map
