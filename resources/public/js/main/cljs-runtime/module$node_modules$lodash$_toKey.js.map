{
"version":3,
"file":"module$node_modules$lodash$_toKey.js",
"lineCount":11,
"mappings":"AAAAA,cAAA,CAAA,iCAAA,GAAsD,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAC9F,MAAIC,WAAWH,OAAA,CAAQ,qCAAR,CAAf,EAGII,WAAW,CAAXA,GAAe,CAHnB;AAoBAH,QAAOC,CAAAA,OAAP,GARAG,QAAc,CAACC,KAAD,CAAQ;AACpB,QAAoB,QAApB,IAAI,MAAOA,MAAX,IAAgCH,QAAA,CAASG,KAAT,CAAhC;AACE,aAAOA,KAAP;AADF;AAGA,QAAIC,SAAUD,KAAVC,GAAkB,EAAtB;AACA,WAAkB,GAAX,IAACA,MAAD,IAAmB,CAAnB,GAAuBD,KAAvB,IAAiC,CAACF,QAAlC,GAA8C,IAA9C,GAAqDG,MAA5D;AALoB,GAQtB;AArB8F,CAA9F;;",
"sources":["node_modules/lodash/_toKey.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_toKey\"] = function(global,require,module,exports) {\nvar isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n\n};"],
"names":["shadow$provide","global","require","module","exports","isSymbol","INFINITY","toKey","value","result"]
}
