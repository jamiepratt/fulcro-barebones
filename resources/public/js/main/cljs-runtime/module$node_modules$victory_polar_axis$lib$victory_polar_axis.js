shadow$provide.module$node_modules$victory_polar_axis$lib$victory_polar_axis = function(global, require, module, exports) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.VictoryPolarAxis = void 0;
  var _isEmpty2 = _interopRequireDefault(require("module$node_modules$lodash$isEmpty")), _react = _interopRequireDefault(require("module$node_modules$react$index")), _victoryCore = require("module$node_modules$victory_core$lib$index"), _helperMethods = require("module$node_modules$victory_polar_axis$lib$helper_methods");
  const fallbackProps = {width:450, height:300, padding:50};
  class VictoryPolarAxisBase extends _react.default.Component {
    static $jscomp$static$init$1432391843$0$animationWhitelist() {
      return "style domain range tickCount tickValues padding width height".split(" ");
    }
    static $jscomp$static$init$1432391843$1$displayName() {
      return "VictoryAxis";
    }
    static $jscomp$static$init$1432391843$2$role() {
      return "axis";
    }
    static $jscomp$static$init$1432391843$3$defaultTransitions() {
      return {onExit:{duration:500}, onEnter:{duration:500}};
    }
    static $jscomp$static$init$1432391843$4$defaultProps() {
      return {axisComponent:_react.default.createElement(_victoryCore.LineSegment, null), axisLabelComponent:_react.default.createElement(_victoryCore.VictoryLabel, null), circularAxisComponent:_react.default.createElement(_victoryCore.Arc, null), circularGridComponent:_react.default.createElement(_victoryCore.Arc, null), containerComponent:_react.default.createElement(_victoryCore.VictoryContainer, null), endAngle:360, gridComponent:_react.default.createElement(_victoryCore.LineSegment, null), groupComponent:_react.default.createElement("g", 
      {role:"presentation"}), labelPlacement:"parallel", startAngle:0, standalone:!0, theme:_victoryCore.VictoryTheme.grayscale, tickComponent:_react.default.createElement(_victoryCore.LineSegment, null), tickLabelComponent:_react.default.createElement(_victoryCore.VictoryLabel, null)};
    }
    static $jscomp$static$init$1432391843$5$getDomain() {
      return _victoryCore.Axis.getDomain;
    }
    static $jscomp$static$init$1432391843$6$getAxis() {
      return _victoryCore.Axis.getAxis;
    }
    static getScale(props) {
      return (0,_helperMethods.getScale)(props);
    }
    static getStyles(props) {
      return (0,_helperMethods.getStyles)(props, fallbackProps.style);
    }
    static getBaseProps(props) {
      return (0,_helperMethods.getBaseProps)(props, fallbackProps);
    }
    static $jscomp$static$init$1432391843$7$expectedComponents() {
      return "axisComponent circularAxisComponent groupComponent containerComponent tickComponent tickLabelComponent gridComponent circularGridComponent".split(" ");
    }
    renderAxisLine(props) {
      var {dependentAxis} = props;
      props = dependentAxis ? props.axisComponent : props.circularAxisComponent;
      dependentAxis = this.getComponentProps(props, "axis", 0);
      return _react.default.cloneElement(props, dependentAxis);
    }
    renderLabel(props) {
      const {axisLabelComponent, dependentAxis, label} = props;
      if (!label || !dependentAxis) {
        return null;
      }
      props = this.getComponentProps(axisLabelComponent, "axisLabel", 0);
      return _react.default.cloneElement(axisLabelComponent, props);
    }
    renderAxis(props) {
      const {tickComponent, tickLabelComponent, name} = props, shouldRender = componentProps => {
        const {style = {}, events = {}} = componentProps;
        return "transparent" !== style.stroke && "none" !== style.stroke && 0 !== style.strokeWidth || !(0,_isEmpty2.default)(events);
      }, gridComponent = "radial" === (props.dependentAxis ? "radial" : "angular") ? props.circularGridComponent : props.gridComponent;
      var tickComponents = this.dataKeys.map((key, index) => {
        key = Object.assign({key:`${name}-tick-${key}`}, this.getComponentProps(tickComponent, "ticks", index));
        key = _react.default.cloneElement(tickComponent, key);
        return shouldRender(key.props) ? key : void 0;
      }).filter(Boolean);
      const gridComponents = this.dataKeys.map((key, index) => {
        key = Object.assign({key:`${name}-grid-${key}`}, this.getComponentProps(gridComponent, "grid", index));
        key = _react.default.cloneElement(gridComponent, key);
        return shouldRender(key.props) ? key : void 0;
      }).filter(Boolean), tickLabelComponents = this.dataKeys.map((key, index) => {
        key = Object.assign({key:`${name}-tick-${key}`}, this.getComponentProps(tickLabelComponent, "tickLabels", index));
        return _react.default.cloneElement(tickLabelComponent, key);
      }), axis = this.renderAxisLine(props), axisLabel = this.renderLabel(props);
      tickComponents = [axis, axisLabel, ...tickComponents, ...gridComponents, ...tickLabelComponents];
      return this.renderGroup(props, tickComponents);
    }
    renderGroup(props, children) {
      ({groupComponent:props} = props);
      return _react.default.cloneElement(props, {}, children);
    }
    shouldAnimate() {
      return !!this.props.animate;
    }
    render() {
      var {animationWhitelist} = VictoryPolarAxis;
      const props = _victoryCore.Axis.modifyProps(this.props, fallbackProps);
      if (this.shouldAnimate()) {
        return this.animateComponent(props, animationWhitelist);
      }
      animationWhitelist = this.renderAxis(props);
      return props.standalone ? this.renderContainer(props.containerComponent, animationWhitelist) : animationWhitelist;
    }
  }
  VictoryPolarAxisBase.animationWhitelist = VictoryPolarAxisBase.$jscomp$static$init$1432391843$0$animationWhitelist();
  VictoryPolarAxisBase.displayName = VictoryPolarAxisBase.$jscomp$static$init$1432391843$1$displayName();
  VictoryPolarAxisBase.role = VictoryPolarAxisBase.$jscomp$static$init$1432391843$2$role();
  VictoryPolarAxisBase.defaultTransitions = VictoryPolarAxisBase.$jscomp$static$init$1432391843$3$defaultTransitions();
  VictoryPolarAxisBase.defaultProps = VictoryPolarAxisBase.$jscomp$static$init$1432391843$4$defaultProps();
  VictoryPolarAxisBase.getDomain = VictoryPolarAxisBase.$jscomp$static$init$1432391843$5$getDomain();
  VictoryPolarAxisBase.getAxis = VictoryPolarAxisBase.$jscomp$static$init$1432391843$6$getAxis();
  VictoryPolarAxisBase.expectedComponents = VictoryPolarAxisBase.$jscomp$static$init$1432391843$7$expectedComponents();
  const VictoryPolarAxis = exports.VictoryPolarAxis = (0,_victoryCore.addEvents)(VictoryPolarAxisBase, {components:[{name:"axis", index:0}, {name:"axisLabel", index:0}, {name:"grid"}, {name:"parent", index:"parent"}, {name:"ticks"}, {name:"tickLabels"}]});
};

//# sourceMappingURL=module$node_modules$victory_polar_axis$lib$victory_polar_axis.js.map
